{
  "function_name": "tf.image.rgb_to_hsv(images,name=None)",
  "inputs": [
    "images"
  ],
  "sample_inputs": [
    "images = tf.constant([[[255, 0, 0], [0, 255, 0]], [[0, 0, 255], [255, 255, 0]]], dtype=tf.float32) / 255.0",
    "images = tf.constant([[[255, 0, 0], [0, 255, 0]], [[0, 0, 255], [255, 255, 0]]], dtype=tf.float32)",
    "images = tf.constant(np.random.randn(2,5,3), dtype='float32')",
    "images = tf.constant(np.random.randn(1,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,3,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='half')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float16')",
    "images = tf.constant(np.random.randn(2,1,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(images):\n  return tf.image.rgb_to_hsv(images)",
    "pytorch": "def pytorch_call(images):\n    (r, g, b) = (images[..., 0], images[..., 1], images[..., 2])\n    maxc = images.max(dim=-1)[0]\n    minc = images.min(dim=-1)[0]\n    delta = maxc - minc\n    h = torch.zeros_like(maxc)\n    s = torch.zeros_like(maxc)\n    v = maxc\n    mask = delta != 0\n    h[mask & (maxc == r)] = 60 * ((g[mask & (maxc == r)] - b[mask & (maxc == r)]) / delta[mask & (maxc == r)] % 6)\n    h[mask & (maxc == g)] = 60 * (2.0 + (b[mask & (maxc == g)] - r[mask & (maxc == g)]) / delta[mask & (maxc == g)])\n    h[mask & (maxc == b)] = 60 * (4.0 + (r[mask & (maxc == b)] - g[mask & (maxc == b)]) / delta[mask & (maxc == b)])\n    h = torch.where(h < 0, h + 360, h) / 360.0\n    s[maxc != 0] = delta[maxc != 0] / maxc[maxc != 0]\n    return torch.stack((h, s, v), dim=-1)"
  },
  "llm_inputs": [
    "images = tf.constant([[[255, 0, 0], [0, 255, 0]], [[0, 0, 255], [255, 255, 0]]], dtype=tf.float32) / 255.0",
    "images = tf.constant([[[255, 0, 0], [0, 255, 0]], [[0, 0, 255], [255, 255, 0]]], dtype=tf.float32)",
    "images = tf.constant([[[255, 0, 0], [0, 255, 0]], [[0, 0, 255], [255, 255, 0]]], dtype=tf.float32)"
  ]
}
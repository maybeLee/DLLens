{
  "function_name": "tf.linalg.eigh_tridiagonal(alpha,beta,eigvals_only=True,select='a',select_range=None,tol=None,name=None)",
  "inputs": [
    "alpha",
    "beta",
    "eigvals_only",
    "select",
    "select_range",
    "tol"
  ],
  "sample_inputs": [
    "alpha = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nbeta = tf.constant([0.5, 0.5], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None",
    "alpha = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)\nbeta = tf.constant([0.1, 0.2, 0.3, 0.4], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None",
    "beta = tf.constant([0.5, 0.5], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None\nalpha = tf.constant(np.random.randn(3,1), dtype='float32')",
    "alpha = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None\nbeta = tf.constant(np.random.randn(2), dtype='float32')",
    "alpha = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None\nbeta = tf.constant(np.random.randn(2,1), dtype='float32')",
    "alpha = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nbeta = tf.constant([0.5, 0.5], dtype=tf.float32)\nselect = 'a'\nselect_range = None\ntol = None\neigvals_only = False",
    "beta = tf.constant([0.5, 0.5], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None\nalpha = tf.constant(np.random.randn(1), dtype='float32')",
    "beta = tf.constant([0.5, 0.5], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None\nalpha = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(alpha,beta,eigvals_only=True,select='a',select_range=None,tol=None):\n  return tf.linalg.eigh_tridiagonal(alpha,beta,eigvals_only,select,select_range,tol)",
    "pytorch": "def pytorch_call(alpha, beta, eigvals_only=True, select='a', select_range=None, tol=None):\n    if alpha.dim() > 1:\n        alpha = alpha.flatten()\n    n = alpha.size(0)\n    if beta.dim() == 2 and beta.size(1) == 1:\n        beta = beta.squeeze(1)\n    A = torch.zeros((n, n), dtype=alpha.dtype)\n    A += torch.diag(alpha)\n    if n > 1:\n        A += torch.diag(beta, 1)\n        A += torch.diag(beta, -1)\n    (eigenvalues, eigenvectors) = torch.linalg.eigh(A)\n    if eigvals_only:\n        if select == 'a':\n            return eigenvalues\n        else:\n            raise ValueError('Invalid selection criteria')\n    else:\n        for i in range(n):\n            if eigenvectors[0, i] < 0:\n                eigenvectors[:, i] *= -1\n        return (eigenvalues, eigenvectors)"
  },
  "llm_inputs": [
    "alpha = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nbeta = tf.constant([0.5, 0.5], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None",
    "alpha = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)\nbeta = tf.constant([0.1, 0.2, 0.3, 0.4], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None",
    "alpha = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nbeta = tf.constant([0.5, 0.5], dtype=tf.float32)\neigvals_only = True\nselect = 'a'\nselect_range = None\ntol = None"
  ]
}
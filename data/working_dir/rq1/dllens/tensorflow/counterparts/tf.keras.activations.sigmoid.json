{
  "function_name": "tf.keras.activations.sigmoid(x)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([[0.1], [0.5], [0.9]])",
    "x = tf.constant([0.1, 0.5, 0.9])",
    "x = tf.constant([[0.5], [1.0], [1.5], [2.0], [2.5]])",
    "x = tf.constant(np.random.randn(3,1), dtype='float64')",
    "x = tf.constant(np.random.randn(5,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1), dtype='half')",
    "x = tf.constant(np.random.randn(1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1), dtype='float16')",
    "x = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,4), dtype='float32')",
    "x = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant(np.random.randn(4,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,5), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.keras.activations.sigmoid(x)",
    "pytorch": "def pytorch_call(x):\n    return torch.sigmoid(x)"
  },
  "llm_inputs": [
    "x = tf.constant([[0.1], [0.5], [0.9]])",
    "x = tf.constant([0.1, 0.5, 0.9])",
    "x = tf.constant([[0.5], [1.0], [1.5], [2.0], [2.5]])"
  ]
}
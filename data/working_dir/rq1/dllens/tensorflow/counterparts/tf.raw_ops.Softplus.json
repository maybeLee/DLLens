{
  "function_name": "tf.raw_ops.Softplus(features,name=None)",
  "inputs": [
    "features"
  ],
  "sample_inputs": [
    "features = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)",
    "features = tf.constant(np.random.randn(), dtype='float32')",
    "features = tf.constant(np.random.randn(5,1,1,1,1), dtype='float32')",
    "features = tf.constant(np.random.randn(1), dtype='float32')",
    "features = tf.constant(np.random.randn(5), dtype='half')",
    "features = tf.constant(np.random.randn(2), dtype='float32')",
    "features = tf.constant(np.random.randn(5,1,1), dtype='float32')",
    "features = tf.constant(np.random.randn(5), dtype='float16')",
    "features = tf.constant(np.random.randn(5,1,1,1), dtype='float32')",
    "features = tf.constant(np.random.randn(5,1), dtype='float32')",
    "features = tf.constant(np.random.randn(4), dtype='float32')",
    "features = tf.constant(np.random.randn(5), dtype='float32')",
    "features = tf.constant(np.random.randn(5), dtype='float64')",
    "features = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(features):\n  return tf.raw_ops.Softplus(features=features)",
    "pytorch": "def pytorch_call(features):\n    return torch.nn.functional.softplus(features)"
  },
  "llm_inputs": [
    "features = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)",
    "features = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)",
    "features = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)"
  ]
}
{
  "function_name": "tf.broadcast_to(input,shape,name=None)",
  "inputs": [
    "input",
    "shape"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2], [3, 4]])\nshape = tf.constant([2, 2, 2])",
    "shape = tf.constant([2, 2, 2])\ninput = tf.constant(np.random.randint(-50, 50, (1,2)), dtype='int32')",
    "shape = tf.constant([2, 2, 2])\ninput = tf.constant(np.random.randint(-50, 50, (2)), dtype='int32')",
    "shape = tf.constant([2, 2, 2])\ninput = tf.constant(np.random.randint(-50, 50, (2,2)), dtype='int64')",
    "shape = tf.constant([2, 2, 2])\ninput = tf.constant(np.random.randint(-50, 50, (2,2)), dtype='int32')",
    "shape = tf.constant([2, 2, 2])\ninput = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "shape = tf.constant([2, 2, 2])\ninput = tf.constant(np.random.randint(-50, 50, (2,2,1)), dtype='int32')",
    "shape = tf.constant([2, 2, 2])\ninput = tf.constant(np.random.randint(-50, 50, (2,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,shape):\n  return tf.broadcast_to(input,shape)",
    "pytorch": "def pytorch_call(input, shape):\n    return input.expand(shape.tolist())"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2], [3, 4]])\nshape = tf.constant([2, 2, 2])",
    "input = tf.constant([[1, 2], [3, 4]])\nshape = tf.constant([2, 2, 2])",
    "input = tf.constant([[1, 2], [3, 4]])\nshape = tf.constant([2, 2, 2])"
  ]
}
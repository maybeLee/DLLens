{
  "function_name": "tf.keras.losses.mean_squared_logarithmic_error(y_true,y_pred)",
  "inputs": [
    "y_true",
    "y_pred"
  ],
  "sample_inputs": [
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 1.8, 2.5], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)\ny_pred = tf.constant([1.1, 1.9, 3.2, 4.1, 5.0], dtype=tf.float32)",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float16')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float64')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float64')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='half')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='half')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float16')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(y_true,y_pred):\n  return tf.keras.losses.mean_squared_logarithmic_error(y_true,y_pred)",
    "pytorch": "def pytorch_call(y_true, y_pred):\n    y_true_clipped = torch.clamp(y_true, min=0)\n    y_pred_clipped = torch.clamp(y_pred, min=0)\n    log_true = torch.log1p(y_true_clipped)\n    log_pred = torch.log1p(y_pred_clipped)\n    loss = (log_pred - log_true) ** 2\n    return loss.mean(dim=-1, keepdim=True)"
  },
  "llm_inputs": [
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 1.8, 2.5], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0], dtype=tf.float32)\ny_pred = tf.constant([1.1, 1.9, 3.2, 4.1, 5.0], dtype=tf.float32)"
  ]
}
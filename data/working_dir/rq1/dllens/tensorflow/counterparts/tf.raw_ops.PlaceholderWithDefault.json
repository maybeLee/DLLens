{
  "function_name": "tf.raw_ops.PlaceholderWithDefault(input,shape,name=None)",
  "inputs": [
    "input",
    "shape"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nshape = tf.constant([2, 2], dtype=tf.int32)",
    "input = tf.constant([[1.0, 2.0], [3.0, 4.0]])\nshape = tf.constant([2, 2])",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,4), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='float16')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(1,2), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='float64')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='half')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(5,2), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,5), dtype='float32')",
    "shape = tf.constant([2, 2], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,1), dtype='float32')",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nshape = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,shape):\n  return tf.raw_ops.PlaceholderWithDefault(input=input,shape=shape)",
    "pytorch": "def pytorch_call(input, shape):\n    shape_list = shape.tolist()\n    if input.numel() == torch.tensor(shape_list).prod().item():\n        output = input.view(shape_list)\n    else:\n        output = input\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nshape = tf.constant([2, 2], dtype=tf.int32)",
    "input = tf.constant([[1.0, 2.0], [3.0, 4.0]])\nshape = tf.constant([2, 2])",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nshape = tf.constant([2, 2], dtype=tf.int32)"
  ]
}
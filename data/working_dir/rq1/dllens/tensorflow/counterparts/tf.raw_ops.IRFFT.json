{
  "function_name": "tf.raw_ops.IRFFT(input,fft_length,Treal=tf.dtypes.float32,name=None)",
  "inputs": [
    "input",
    "fft_length",
    "Treal"
  ],
  "sample_inputs": [
    "input = tf.constant([1.0 + 2j, 3.0 + 4j, 5.0 + 6j, 7.0 + 8j], dtype=tf.complex64)\nfft_length = tf.constant([4], dtype=tf.int32)\nTreal = tf.dtypes.float32",
    "fft_length = tf.constant([4], dtype=tf.int32)\nTreal = tf.dtypes.float32\ninput = tf.constant(np.random.randn(4), dtype='complex64')",
    "fft_length = tf.constant([4], dtype=tf.int32)\nTreal = tf.dtypes.float32\ninput = tf.constant(np.random.randn(5), dtype='complex64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,fft_length,Treal=tf.dtypes.float32):\n  return tf.raw_ops.IRFFT(input=input,fft_length=fft_length,Treal=Treal)",
    "pytorch": "def pytorch_call(input, fft_length, Treal=torch.float32):\n    return torch.fft.irfft(input, n=fft_length.item(), norm='backward').type(Treal)"
  },
  "llm_inputs": [
    "input = tf.constant([1.0 + 2j, 3.0 + 4j, 5.0 + 6j, 7.0 + 8j], dtype=tf.complex64)\nfft_length = tf.constant([4], dtype=tf.int32)\nTreal = tf.dtypes.float32"
  ]
}
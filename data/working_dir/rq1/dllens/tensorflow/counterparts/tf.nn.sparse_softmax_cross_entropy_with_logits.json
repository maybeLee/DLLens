{
  "function_name": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels,logits,name=None)",
  "inputs": [
    "labels",
    "logits"
  ],
  "sample_inputs": [
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant([[0.1, 0.2, 0.7], [0.5, 0.5, 0.0], [0.0, 1.0, 0.0]], dtype=tf.float32)",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant([[1.0, 2.0, 0.5], [1.5, 0.5, 1.0], [0.0, 1.0, 3.0]], dtype=tf.float32)",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant([[0.1, 0.2, 0.7], [0.5, 0.5, 0.0], [0.3, 0.3, 0.4]], dtype=tf.float32)",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant(np.random.randn(3,3), dtype='float16')",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant(np.random.randn(3,3), dtype='half')",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant(np.random.randn(3,3), dtype='float64')",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant(np.random.randn(3,3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(labels,logits):\n  return tf.nn.sparse_softmax_cross_entropy_with_logits(labels,logits)",
    "pytorch": "def pytorch_call(labels, logits):\n    labels = labels.long()\n    logits = logits.float()\n    return F.cross_entropy(logits, labels, reduction='none')"
  },
  "llm_inputs": [
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant([[0.1, 0.2, 0.7], [0.5, 0.5, 0.0], [0.0, 1.0, 0.0]], dtype=tf.float32)",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant([[1.0, 2.0, 0.5], [1.5, 0.5, 1.0], [0.0, 1.0, 3.0]], dtype=tf.float32)",
    "labels = tf.constant([1, 0, 2], dtype=tf.int32)\nlogits = tf.constant([[0.1, 0.2, 0.7], [0.5, 0.5, 0.0], [0.3, 0.3, 0.4]], dtype=tf.float32)"
  ]
}
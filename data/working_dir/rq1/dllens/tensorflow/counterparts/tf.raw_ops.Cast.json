{
  "function_name": "tf.raw_ops.Cast(x,DstT,Truncate=False,name=None)",
  "inputs": [
    "x",
    "DstT",
    "Truncate"
  ],
  "sample_inputs": [
    "x = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nDstT = tf.float32\nTruncate = False",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,2), dtype='float16')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(1,2), dtype='float32')",
    "x = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nDstT = tf.float32\nTruncate = True",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,2), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(3,2), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,2), dtype='half')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,5), dtype='float32')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,2), dtype='float64')",
    "DstT = tf.float32\nTruncate = False\nx = tf.constant(np.random.randn(2,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x,DstT,Truncate=False):\n  return tf.raw_ops.Cast(x=x,DstT=DstT,Truncate=Truncate)",
    "pytorch": "def pytorch_call(x, DstT, Truncate=False):\n    if DstT == torch.float32:\n        return x.to(torch.float32)\n    elif DstT == torch.float16:\n        return x.to(torch.float16)\n    elif DstT == torch.int32:\n        return x.to(torch.int32)\n    elif DstT == torch.int64:\n        return x.to(torch.int64)\n    else:\n        raise ValueError('Unsupported DstT type')"
  },
  "llm_inputs": [
    "x = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nDstT = tf.float32\nTruncate = False",
    "x = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nDstT = tf.float32\nTruncate = False",
    "x = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nDstT = tf.float32\nTruncate = False"
  ]
}
{
  "function_name": "tf.nn.depth_to_space(input,block_size,data_format='NHWC',name=None)",
  "inputs": [
    "input",
    "block_size",
    "data_format"
  ],
  "sample_inputs": [
    "input = tf.constant([[[[1, 2, 3, 4]]]], dtype=tf.float32)\nblock_size = 2\ndata_format = 'NHWC'",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,2,1,4), dtype='float32')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,1,1,4), dtype='float32')",
    "input = tf.constant([[[[1, 2, 3, 4]]]], dtype=tf.float32)\ndata_format = 'NHWC'\nblock_size = 2",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,1,5,4), dtype='float32')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,1,1,4), dtype='float16')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,1,1,4), dtype='half')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,1,1,4), dtype='float64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,block_size,data_format='NHWC'):\n  return tf.nn.depth_to_space(input,block_size,data_format)",
    "pytorch": "def pytorch_call(input, block_size, data_format='NHWC'):\n    if data_format != 'NHWC':\n        raise ValueError(\"Currently, only 'NHWC' data format is supported.\")\n    (N, H, W, C) = input.shape\n    output = input.view(N, H, W, block_size, block_size, C // (block_size * block_size))\n    output = output.permute(0, 1, 3, 2, 4, 5).contiguous()\n    output = output.view(N, H * block_size, W * block_size, C // (block_size * block_size))\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[[[1, 2, 3, 4]]]], dtype=tf.float32)\nblock_size = 2\ndata_format = 'NHWC'"
  ]
}
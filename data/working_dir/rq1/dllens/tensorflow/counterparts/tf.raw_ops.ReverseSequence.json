{
  "function_name": "tf.raw_ops.ReverseSequence(input,seq_lengths,seq_dim,batch_dim=0,name=None)",
  "inputs": [
    "input",
    "seq_lengths",
    "seq_dim",
    "batch_dim"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = tf.constant(0, dtype=tf.int32)",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0\ninput = tf.constant(np.random.randn(2,3), dtype='half')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0\ninput = tf.constant(np.random.randn(2,3,1,1,1), dtype='float32')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0\ninput = tf.constant(np.random.randn(2,3), dtype='float32')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0\ninput = tf.constant(np.random.randn(2,3), dtype='float64')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0\ninput = tf.constant(np.random.randn(2,3,1,1), dtype='float32')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0\ninput = tf.constant(np.random.randn(2,3), dtype='float16')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0\ninput = tf.constant(np.random.randn(2,3,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,seq_lengths,seq_dim,batch_dim=0):\n  return tf.raw_ops.ReverseSequence(input=input,seq_lengths=seq_lengths,seq_dim=seq_dim,batch_dim=batch_dim)",
    "pytorch": "def pytorch_call(input, seq_lengths, seq_dim=1, batch_dim=0):\n    seq_lengths = seq_lengths.view(-1)\n    max_len = input.size(seq_dim)\n    batch_size = input.size(batch_dim)\n    output = input.clone()\n    for i in range(batch_size):\n        length = seq_lengths[i].item()\n        if length > 0:\n            indices = torch.arange(length).flip(dims=[0])\n            output[i, :length] = input[i, indices]\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = 0",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_dim = tf.constant(1, dtype=tf.int32)\nbatch_dim = tf.constant(0, dtype=tf.int32)"
  ]
}
{
  "function_name": "tf.metrics.mean_squared_logarithmic_error(y_true,y_pred)",
  "inputs": [
    "y_true",
    "y_pred"
  ],
  "sample_inputs": [
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)",
    "y_true = tf.constant([0.1, 0.2, 0.3, 0.4, 0.5], dtype=tf.float32)\ny_pred = tf.constant([0.1, 0.15, 0.35, 0.45, 0.55], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0])\ny_pred = tf.constant([1.5, 2.5, 3.5, 4.5, 5.5])",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float64')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float16')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='half')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float16')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='half')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float64')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(y_true,y_pred):\n  return tf.metrics.mean_squared_logarithmic_error(y_true,y_pred)",
    "pytorch": "def pytorch_call(y_true, y_pred):\n    y_true = torch.clamp(y_true, min=0)\n    y_pred = torch.clamp(y_pred, min=0)\n    msle = (torch.log1p(y_pred) - torch.log1p(y_true)) ** 2\n    msle = msle.mean(dim=-1, keepdim=True)\n    return msle"
  },
  "llm_inputs": [
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)",
    "y_true = tf.constant([0.1, 0.2, 0.3, 0.4, 0.5], dtype=tf.float32)\ny_pred = tf.constant([0.1, 0.15, 0.35, 0.45, 0.55], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0])\ny_pred = tf.constant([1.5, 2.5, 3.5, 4.5, 5.5])"
  ]
}
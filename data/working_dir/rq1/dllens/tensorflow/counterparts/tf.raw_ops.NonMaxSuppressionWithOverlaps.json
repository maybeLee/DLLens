{
  "function_name": "tf.raw_ops.NonMaxSuppressionWithOverlaps(overlaps,scores,max_output_size,overlap_threshold,score_threshold,name=None)",
  "inputs": [
    "overlaps",
    "scores",
    "max_output_size",
    "overlap_threshold",
    "score_threshold"
  ],
  "sample_inputs": [
    "overlaps = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], dtype=tf.float32)\nscores = tf.constant([0.9, 0.8, 0.7], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\noverlap_threshold = tf.constant(0.5, dtype=tf.float32)\nscore_threshold = tf.constant(0.6, dtype=tf.float32)",
    "overlaps = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\noverlap_threshold = tf.constant(0.5, dtype=tf.float32)\nscore_threshold = tf.constant(0.6, dtype=tf.float32)\nscores = tf.constant(np.random.randn(3), dtype='float32')",
    "overlaps = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], dtype=tf.float32)\nscores = tf.constant([0.9, 0.8, 0.7], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\nscore_threshold = tf.constant(0.6, dtype=tf.float32)\noverlap_threshold = tf.constant(np.random.randn(), dtype='float32')",
    "scores = tf.constant([0.9, 0.8, 0.7], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\noverlap_threshold = tf.constant(0.5, dtype=tf.float32)\nscore_threshold = tf.constant(0.6, dtype=tf.float32)\noverlaps = tf.constant(np.random.randn(3,3), dtype='float32')",
    "overlaps = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], dtype=tf.float32)\nscores = tf.constant([0.9, 0.8, 0.7], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\noverlap_threshold = tf.constant(0.5, dtype=tf.float32)\nscore_threshold = tf.constant(np.random.randn(), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(overlaps,scores,max_output_size,overlap_threshold,score_threshold):\n  return tf.raw_ops.NonMaxSuppressionWithOverlaps(overlaps=overlaps,scores=scores,max_output_size=max_output_size,overlap_threshold=overlap_threshold,score_threshold=score_threshold)",
    "pytorch": "def pytorch_call(overlaps, scores, max_output_size, overlap_threshold, score_threshold):\n    sorted_indices = torch.argsort(scores, descending=True)\n    selected_indices = []\n    while len(sorted_indices) > 0 and len(selected_indices) < max_output_size.item():\n        current_index = sorted_indices[0]\n        selected_indices.append(current_index.item())\n        overlaps_with_current = overlaps[current_index]\n        sorted_indices = sorted_indices[1:]\n        sorted_indices = sorted_indices[overlaps_with_current[sorted_indices] <= overlap_threshold]\n        sorted_indices = sorted_indices[scores[sorted_indices] > score_threshold]\n    return torch.tensor(selected_indices, dtype=torch.int32)"
  },
  "llm_inputs": [
    "overlaps = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], dtype=tf.float32)\nscores = tf.constant([0.9, 0.8, 0.7], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\noverlap_threshold = tf.constant(0.5, dtype=tf.float32)\nscore_threshold = tf.constant(0.6, dtype=tf.float32)",
    "overlaps = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], dtype=tf.float32)\nscores = tf.constant([0.9, 0.8, 0.7], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\noverlap_threshold = tf.constant(0.5, dtype=tf.float32)\nscore_threshold = tf.constant(0.6, dtype=tf.float32)",
    "overlaps = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], dtype=tf.float32)\nscores = tf.constant([0.9, 0.8, 0.7], dtype=tf.float32)\nmax_output_size = tf.constant(3, dtype=tf.int32)\noverlap_threshold = tf.constant(0.5, dtype=tf.float32)\nscore_threshold = tf.constant(0.6, dtype=tf.float32)"
  ]
}
{
  "function_name": "tf.raw_ops.LeakyRelu(features,alpha=0.2,name=None)",
  "inputs": [
    "features",
    "alpha"
  ],
  "sample_inputs": [
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = 0.2",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,2), dtype='float64')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,5), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,2), dtype='half')",
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = 43.6",
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = -97.06",
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = -79.07",
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = 33.58",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,2), dtype='float32')",
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = 49.36",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(1,2), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,2), dtype='float16')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(2,1), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(), dtype='float32')",
    "alpha = 0.2\nfeatures = tf.constant(np.random.randn(4,2), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(features,alpha=0.2):\n  return tf.raw_ops.LeakyRelu(features=features,alpha=alpha)",
    "pytorch": "def pytorch_call(features, alpha=0.2):\n    return torch.nn.functional.leaky_relu(features, negative_slope=alpha)"
  },
  "llm_inputs": [
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = 0.2",
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = 0.2",
    "features = tf.constant([[1.0, -2.0], [3.0, -4.0]], dtype=tf.float32)\nalpha = 0.2"
  ]
}
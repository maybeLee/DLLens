{
  "function_name": "tf.raw_ops.RFFT(input,fft_length,Tcomplex=tf.dtypes.complex64,name=None)",
  "inputs": [
    "input",
    "fft_length",
    "Tcomplex"
  ],
  "sample_inputs": [
    "input = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nfft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64",
    "input = tf.constant([1.0, 2.0, 3.0, 4.0], dtype=tf.float32)\nfft_length = tf.constant([4], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64",
    "fft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64\ninput = tf.constant(np.random.randn(1,2), dtype='float32')",
    "fft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64\ninput = tf.constant(np.random.randn(2,5), dtype='float32')",
    "fft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64\ninput = tf.constant(np.random.randn(5,2), dtype='float32')",
    "fft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64\ninput = tf.constant(np.random.randn(2), dtype='float32')",
    "fft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64\ninput = tf.constant(np.random.randn(3,2), dtype='float32')",
    "fft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64\ninput = tf.constant(np.random.randn(2,2), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,fft_length,Tcomplex=tf.dtypes.complex64):\n  return tf.raw_ops.RFFT(input=input,fft_length=fft_length,Tcomplex=Tcomplex)",
    "pytorch": "def pytorch_call(input, fft_length, Tcomplex=torch.complex64):\n    return torch.fft.rfft(input, n=fft_length.item()).type(Tcomplex)"
  },
  "llm_inputs": [
    "input = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nfft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64",
    "input = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nfft_length = tf.constant([2], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64",
    "input = tf.constant([1.0, 2.0, 3.0, 4.0], dtype=tf.float32)\nfft_length = tf.constant([4], dtype=tf.int32)\nTcomplex = tf.dtypes.complex64"
  ]
}
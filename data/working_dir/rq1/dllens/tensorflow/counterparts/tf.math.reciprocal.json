{
  "function_name": "tf.math.reciprocal(x,name=None)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "x = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0])",
    "x = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='half')",
    "x = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float64')",
    "x = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float16')",
    "x = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.math.reciprocal(x)",
    "pytorch": "def pytorch_call(x):\n    return 1 / x"
  },
  "llm_inputs": [
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "x = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0])",
    "x = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0])"
  ]
}
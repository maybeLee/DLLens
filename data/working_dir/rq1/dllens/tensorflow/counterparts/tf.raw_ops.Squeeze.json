{
  "function_name": "tf.raw_ops.Squeeze(input,axis=[],name=None)",
  "inputs": [
    "input",
    "axis"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2, 3]])\naxis = [0]",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,3)), dtype='int32')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,3,1,1)), dtype='int32')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,2)), dtype='int32')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,1)), dtype='int32')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,5)), dtype='int32')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,3,1,1,1)), dtype='int32')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,3)), dtype='int64')",
    "axis = [0]\ninput = tf.constant(np.random.randint(-50, 50, (1,3,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,axis=[]):\n  return tf.raw_ops.Squeeze(input=input,axis=axis)",
    "pytorch": "def pytorch_call(input, axis=[]):\n    dim = tuple(axis) if axis else None\n    return input.squeeze(dim)"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2, 3]])\naxis = [0]",
    "input = tf.constant([[1, 2, 3]])\naxis = [0]",
    "input = tf.constant([[1, 2, 3]])\naxis = [0]"
  ]
}
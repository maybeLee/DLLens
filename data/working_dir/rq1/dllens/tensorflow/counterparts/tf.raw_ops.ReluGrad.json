{
  "function_name": "tf.raw_ops.ReluGrad(gradients,features,name=None)",
  "inputs": [
    "gradients",
    "features"
  ],
  "sample_inputs": [
    "gradients = tf.constant([[0.1], [0.2], [0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)",
    "gradients = tf.constant([[0.1], [0.2], [0.3]], dtype=tf.float32)\nfeatures = tf.constant([[0.5], [0.6], [0.7]], dtype=tf.float32)",
    "gradients = tf.constant([[0.1, -0.2], [0.3, -0.4]], dtype=tf.float32)\nfeatures = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)",
    "features = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\ngradients = tf.constant(np.random.randn(3,1), dtype='float32')",
    "gradients = tf.constant([[0.1], [0.2], [0.3]], dtype=tf.float32)\nfeatures = tf.constant(np.random.randn(3,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(gradients,features):\n  return tf.raw_ops.ReluGrad(gradients=gradients,features=features)",
    "pytorch": "def pytorch_call(gradients, features):\n    relu_features = torch.nn.functional.relu(features)\n    relu_gradients = torch.zeros_like(features)\n    relu_gradients[relu_features > 0] = gradients[relu_features > 0]\n    return relu_gradients"
  },
  "llm_inputs": [
    "gradients = tf.constant([[0.1], [0.2], [0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)",
    "gradients = tf.constant([[0.1], [0.2], [0.3]], dtype=tf.float32)\nfeatures = tf.constant([[0.5], [0.6], [0.7]], dtype=tf.float32)",
    "gradients = tf.constant([[0.1, -0.2], [0.3, -0.4]], dtype=tf.float32)\nfeatures = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)"
  ]
}
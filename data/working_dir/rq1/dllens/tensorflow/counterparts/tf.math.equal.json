{
  "function_name": "tf.math.equal(x,y,name=None)",
  "inputs": [
    "x",
    "y"
  ],
  "sample_inputs": [
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant([1, 2, 4], dtype=tf.int32)",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant([1, 2, 3], dtype=tf.int32)",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant(np.random.randint(-50, 50, (3,1)), dtype='int32')",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant(np.random.randint(-50, 50, (3,1,1)), dtype='int32')",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "y = tf.constant([1, 2, 4], dtype=tf.int32)\nx = tf.constant(np.random.randint(-50, 50, (3,1)), dtype='int32')",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant(np.random.randint(-50, 50, (3,1,1,1,1)), dtype='int32')",
    "y = tf.constant([1, 2, 4], dtype=tf.int32)\nx = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant(np.random.randint(-50, 50, (3,1,1,1)), dtype='int32')",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant(np.random.randint(-50, 50, (3)), dtype='int32')",
    "y = tf.constant([1, 2, 4], dtype=tf.int32)\nx = tf.constant(np.random.randint(-50, 50, (3,1,1,1)), dtype='int32')",
    "y = tf.constant([1, 2, 4], dtype=tf.int32)\nx = tf.constant(np.random.randint(-50, 50, (3)), dtype='int32')",
    "y = tf.constant([1, 2, 4], dtype=tf.int32)\nx = tf.constant(np.random.randint(-50, 50, (3,1,1)), dtype='int32')",
    "y = tf.constant([1, 2, 4], dtype=tf.int32)\nx = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "y = tf.constant([1, 2, 4], dtype=tf.int32)\nx = tf.constant(np.random.randint(-50, 50, (3,1,1,1,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x,y):\n  return tf.math.equal(x,y)",
    "pytorch": "def pytorch_call(x, y):\n    return torch.eq(x, y)"
  },
  "llm_inputs": [
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant([1, 2, 4], dtype=tf.int32)",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant([1, 2, 4], dtype=tf.int32)",
    "x = tf.constant([1, 2, 3], dtype=tf.int32)\ny = tf.constant([1, 2, 3], dtype=tf.int32)"
  ]
}
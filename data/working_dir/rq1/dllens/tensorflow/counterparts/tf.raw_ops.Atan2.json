{
  "function_name": "tf.raw_ops.Atan2(y,x,name=None)",
  "inputs": [
    "y",
    "x"
  ],
  "sample_inputs": [
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)",
    "y = tf.constant([0.5, 1.0, 1.5], dtype=tf.float32)\nx = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\ny = tf.constant(np.random.randn(3), dtype='float32')",
    "x = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\ny = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\ny = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant(np.random.randn(), dtype='float32')",
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant(np.random.randn(1), dtype='float32')",
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant(np.random.randn(3), dtype='float32')",
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\ny = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\ny = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\ny = tf.constant(np.random.randn(1), dtype='float32')",
    "x = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\ny = tf.constant(np.random.randn(3,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(y,x):\n  return tf.raw_ops.Atan2(y=y,x=x)",
    "pytorch": "def pytorch_call(y, x):\n    return torch.atan2(y, x)"
  },
  "llm_inputs": [
    "y = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)",
    "y = tf.constant([0.5, 1.0, 1.5], dtype=tf.float32)\nx = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "y = tf.constant([0.5, 1.0, 1.5], dtype=tf.float32)\nx = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)"
  ]
}
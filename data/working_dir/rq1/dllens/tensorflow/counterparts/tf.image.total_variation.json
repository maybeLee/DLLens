{
  "function_name": "tf.image.total_variation(images,name=None)",
  "inputs": [
    "images"
  ],
  "sample_inputs": [
    "images = tf.constant([[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]])",
    "images = tf.constant([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]]])",
    "images = tf.constant(np.random.randn(2,2,3,1), dtype='float32')",
    "images = tf.constant(np.random.randn(1,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,5,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,2), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='half')",
    "images = tf.constant(np.random.randn(2,2,5), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float16')",
    "images = tf.constant(np.random.randn(2,1,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(images):\n  return tf.image.total_variation(images)",
    "pytorch": "def pytorch_call(images):\n    if images.dim() == 4:\n        diff_height = torch.abs(images[:, :-1, :, :] - images[:, 1:, :, :])\n        diff_width = torch.abs(images[:, :, :-1, :] - images[:, :, 1:, :])\n    elif images.dim() == 3:\n        images = images.unsqueeze(0)\n        diff_height = torch.abs(images[:, :-1, :, :] - images[:, 1:, :, :])\n        diff_width = torch.abs(images[:, :, :-1, :] - images[:, :, 1:, :])\n    else:\n        raise ValueError('Input tensor must be 3D or 4D')\n    total_variation = diff_height.sum(dim=(1, 2, 3)) + diff_width.sum(dim=(1, 2, 3))\n    return total_variation"
  },
  "llm_inputs": [
    "images = tf.constant([[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]])",
    "images = tf.constant([[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]])",
    "images = tf.constant([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]]])"
  ]
}
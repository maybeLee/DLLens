{
  "function_name": "tf.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None)",
  "inputs": [
    "input",
    "seq_lengths",
    "seq_axis",
    "batch_axis"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,3,1,1,1), dtype='float32')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,3), dtype='float32')",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nbatch_axis = 0\nseq_axis = 1",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,3), dtype='float64')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,3), dtype='half')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,5), dtype='float32')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,3), dtype='float16')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,3,1,1), dtype='float32')",
    "seq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0\ninput = tf.constant(np.random.randn(2,3,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,seq_lengths,seq_axis=None,batch_axis=None):\n  return tf.reverse_sequence(input,seq_lengths,seq_axis,batch_axis)",
    "pytorch": "def pytorch_call(input, seq_lengths, seq_axis=1, batch_axis=0):\n    output = input.clone()\n    if batch_axis != 0:\n        output = output.transpose(batch_axis, 0)\n    for b in range(output.size(0)):\n        length = seq_lengths[b].item()\n        if length > 0:\n            slice_input = output[b, :length] if seq_axis == 1 else output[:length, b]\n            output[b, :length] = slice_input.flip(dims=[0])\n    if batch_axis != 0:\n        output = output.transpose(batch_axis, 0)\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nseq_lengths = tf.constant([3, 2], dtype=tf.int32)\nseq_axis = 1\nbatch_axis = 0"
  ]
}
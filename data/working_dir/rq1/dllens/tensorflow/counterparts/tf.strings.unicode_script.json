{
  "function_name": "tf.strings.unicode_script(input,name=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = tf.constant([1, 2, 3, 4, 5], dtype=tf.int32)",
    "input_data = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ninput = tf.constant(input_data[:5])",
    "input = tf.constant([0, 1, 2, 3, 4, 5, 6, 7, 8])",
    "input = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (5,1,1,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (5,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (5,1,1,1,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (5,1,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (5)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input):\n  return tf.strings.unicode_script(input)",
    "pytorch": "def pytorch_call(input):\n    output = torch.where(input < 0, torch.tensor(-1, dtype=input.dtype), torch.tensor(0, dtype=input.dtype))\n    return output.view(-1, 1, 1)"
  },
  "llm_inputs": [
    "input = tf.constant([1, 2, 3, 4, 5], dtype=tf.int32)",
    "input_data = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ninput = tf.constant(input_data[:5])",
    "input = tf.constant([0, 1, 2, 3, 4, 5, 6, 7, 8])"
  ]
}
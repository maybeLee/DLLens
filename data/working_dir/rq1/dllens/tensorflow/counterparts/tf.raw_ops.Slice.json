{
  "function_name": "tf.raw_ops.Slice(input,begin,size,name=None)",
  "inputs": [
    "input",
    "begin",
    "size"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])\nbegin = tf.constant([0, 1])\nsize = tf.constant([2, 3])",
    "input = tf.constant([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nbegin = tf.constant([0, 1])\nsize = tf.constant([1, 3])",
    "begin = tf.constant([0, 1])\nsize = tf.constant([2, 3])\ninput = tf.constant(np.random.randint(-50, 50, (3,5)), dtype='int64')",
    "begin = tf.constant([0, 1])\nsize = tf.constant([2, 3])\ninput = tf.constant(np.random.randint(-50, 50, (3,5)), dtype='int32')",
    "begin = tf.constant([0, 1])\nsize = tf.constant([2, 3])\ninput = tf.constant(np.random.randint(-50, 50, (5,5)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,begin,size):\n  return tf.raw_ops.Slice(input=input,begin=begin,size=size)",
    "pytorch": "def pytorch_call(input, begin, size):\n    begin_list = begin.tolist()\n    size_list = size.tolist()\n    slices = tuple((slice(begin_list[i], begin_list[i] + size_list[i]) for i in range(len(size_list))))\n    return input[slices]"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])\nbegin = tf.constant([0, 1])\nsize = tf.constant([2, 3])",
    "input = tf.constant([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nbegin = tf.constant([0, 1])\nsize = tf.constant([1, 3])",
    "input = tf.constant([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nbegin = tf.constant([0, 1])\nsize = tf.constant([1, 3])"
  ]
}
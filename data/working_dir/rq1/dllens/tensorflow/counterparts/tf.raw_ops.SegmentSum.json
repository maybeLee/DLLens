{
  "function_name": "tf.raw_ops.SegmentSum(data,segment_ids,name=None)",
  "inputs": [
    "data",
    "segment_ids"
  ],
  "sample_inputs": [
    "data = tf.constant([1.0, 2.0, 3.0, 4.0], dtype=tf.float32)\nsegment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)",
    "data = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nsegment_ids = tf.constant([0, 0, 1], dtype=tf.int32)",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4), dtype='float32')",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4), dtype='half')",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4), dtype='float16')",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4,1,1,1), dtype='float32')",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4,1,1), dtype='float32')",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4), dtype='float64')",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4,1,1,1,1), dtype='float32')",
    "segment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)\ndata = tf.constant(np.random.randn(4,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(data,segment_ids):\n  return tf.raw_ops.SegmentSum(data=data,segment_ids=segment_ids)",
    "pytorch": "def pytorch_call(data, segment_ids):\n    (unique_segments, inverse_indices) = torch.unique(segment_ids, return_inverse=True)\n    segment_sums = torch.zeros(unique_segments.size(0), *data.shape[1:], dtype=data.dtype, device=data.device)\n    segment_sums.index_add_(0, inverse_indices, data)\n    return segment_sums"
  },
  "llm_inputs": [
    "data = tf.constant([1.0, 2.0, 3.0, 4.0], dtype=tf.float32)\nsegment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)",
    "data = tf.constant([1.0, 2.0, 3.0, 4.0], dtype=tf.float32)\nsegment_ids = tf.constant([0, 0, 1, 1], dtype=tf.int32)",
    "data = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nsegment_ids = tf.constant([0, 0, 1], dtype=tf.int32)"
  ]
}
{
  "function_name": "tf.image.grayscale_to_rgb(images,name=None)",
  "inputs": [
    "images"
  ],
  "sample_inputs": [
    "images = tf.constant([[[[0.0]], [[1.0]]], [[[2.0]], [[3.0]]]], dtype=tf.float32)",
    "images = tf.constant([[[0]], [[255]], [[128]], [[64]]], dtype=tf.float32)",
    "images = tf.constant(np.random.randn(2,2,1,1), dtype='half')",
    "images = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,5,1), dtype='float32')",
    "images = tf.constant(np.random.randn(5,2,1,1), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,1,1), dtype='float64')",
    "images = tf.constant(np.random.randn(2,2,1,1), dtype='float16')",
    "images = tf.constant(np.random.randn(2,3,1,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(images):\n  return tf.image.grayscale_to_rgb(images)",
    "pytorch": "def pytorch_call(images):\n    if images.dim() == 3:\n        images = images.unsqueeze(0)\n        return images.repeat(1, 1, 1, 3)\n    elif images.dim() == 4:\n        return images.repeat(1, 1, 1, 3)\n    elif images.dim() == 5:\n        images = images.squeeze(-1)\n        return images.repeat(1, 1, 1, 3)\n    else:\n        raise ValueError('Input tensor must have 3, 4, or 5 dimensions.')"
  },
  "llm_inputs": [
    "images = tf.constant([[[[0.0]], [[1.0]]], [[[2.0]], [[3.0]]]], dtype=tf.float32)",
    "images = tf.constant([[[0]], [[255]], [[128]], [[64]]], dtype=tf.float32)",
    "images = tf.constant([[[0]], [[255]], [[128]], [[64]]], dtype=tf.float32)"
  ]
}
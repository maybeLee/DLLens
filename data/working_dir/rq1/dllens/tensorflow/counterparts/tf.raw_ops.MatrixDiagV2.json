{
  "function_name": "tf.raw_ops.MatrixDiagV2(diagonal,k,num_rows,num_cols,padding_value,name=None)",
  "inputs": [
    "diagonal",
    "k",
    "num_rows",
    "num_cols",
    "padding_value"
  ],
  "sample_inputs": [
    "diagonal = tf.constant([1, 2, 3], dtype=tf.float32)\nk = tf.constant(1, dtype=tf.int32)\nnum_rows = tf.constant(4, dtype=tf.int32)\nnum_cols = tf.constant(4, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.float32)",
    "diagonal = tf.constant([1, 2, 3], dtype=tf.float32)\nk = tf.constant(1, dtype=tf.int32)\nnum_rows = tf.constant(4, dtype=tf.int32)\nnum_cols = tf.constant(4, dtype=tf.int32)\npadding_value = tf.constant(np.random.randn(), dtype='float32')",
    "k = tf.constant(1, dtype=tf.int32)\nnum_rows = tf.constant(4, dtype=tf.int32)\nnum_cols = tf.constant(4, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.float32)\ndiagonal = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(diagonal,k,num_rows,num_cols,padding_value):\n  return tf.raw_ops.MatrixDiagV2(diagonal=diagonal,k=k,num_rows=num_rows,num_cols=num_cols,padding_value=padding_value)",
    "pytorch": "def pytorch_call(diagonal, k, num_rows, num_cols, padding_value):\n    diag_matrix = torch.diag(diagonal)\n    k_value = k.item()\n    result = torch.full((num_rows.item(), num_cols.item()), padding_value.item())\n    if k_value >= 0:\n        row_indices = torch.arange(diagonal.size(0))\n        col_indices = row_indices + k_value\n    else:\n        row_indices = torch.arange(-k_value, diagonal.size(0))\n        col_indices = row_indices - k_value\n    valid_mask = (col_indices >= 0) & (col_indices < num_cols.item()) & (row_indices >= 0) & (row_indices < num_rows.item())\n    result[row_indices[valid_mask], col_indices[valid_mask]] = diagonal[valid_mask]\n    return result"
  },
  "llm_inputs": [
    "diagonal = tf.constant([1, 2, 3], dtype=tf.float32)\nk = tf.constant(1, dtype=tf.int32)\nnum_rows = tf.constant(4, dtype=tf.int32)\nnum_cols = tf.constant(4, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.float32)"
  ]
}
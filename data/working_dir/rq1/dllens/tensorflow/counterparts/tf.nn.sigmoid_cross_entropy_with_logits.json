{
  "function_name": "tf.nn.sigmoid_cross_entropy_with_logits(labels=None,logits=None,name=None)",
  "inputs": [
    "labels",
    "logits"
  ],
  "sample_inputs": [
    "labels = tf.constant([[1.0], [0.0], [1.0]], dtype=tf.float32)\nlogits = tf.constant([[0.5], [-0.5], [1.0]], dtype=tf.float32)",
    "labels = tf.constant([[1.0], [0.0], [1.0], [0.0]], dtype=tf.float32)\nlogits = tf.constant([[0.5], [-0.5], [1.0], [-1.0]], dtype=tf.float32)",
    "labels = tf.constant([0, 1, 0, 1], dtype=tf.float32)\nlogits = tf.constant([0.5, -1.0, 0.0, 2.0], dtype=tf.float32)",
    "logits = tf.constant([[0.5], [-0.5], [1.0]], dtype=tf.float32)\nlabels = tf.constant(np.random.randn(3,1), dtype='float32')",
    "labels = tf.constant([[1.0], [0.0], [1.0]], dtype=tf.float32)\nlogits = tf.constant(np.random.randn(3,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(labels=None,logits=None):\n  return tf.nn.sigmoid_cross_entropy_with_logits(labels,logits)",
    "pytorch": "def pytorch_call(labels=None, logits=None):\n    sigmoid_logits = torch.sigmoid(logits)\n    bce_loss = -(labels * torch.log(sigmoid_logits + 1e-10) + (1 - labels) * torch.log(1 - sigmoid_logits + 1e-10))\n    return bce_loss"
  },
  "llm_inputs": [
    "labels = tf.constant([[1.0], [0.0], [1.0]], dtype=tf.float32)\nlogits = tf.constant([[0.5], [-0.5], [1.0]], dtype=tf.float32)",
    "labels = tf.constant([[1.0], [0.0], [1.0], [0.0]], dtype=tf.float32)\nlogits = tf.constant([[0.5], [-0.5], [1.0], [-1.0]], dtype=tf.float32)",
    "labels = tf.constant([0, 1, 0, 1], dtype=tf.float32)\nlogits = tf.constant([0.5, -1.0, 0.0, 2.0], dtype=tf.float32)"
  ]
}
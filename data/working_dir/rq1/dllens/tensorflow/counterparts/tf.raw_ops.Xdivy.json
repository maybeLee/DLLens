{
  "function_name": "tf.raw_ops.Xdivy(x,y,name=None)",
  "inputs": [
    "x",
    "y"
  ],
  "sample_inputs": [
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant([[5.0, 6.0], [7.0, 8.0]])",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant([[2.0, 4.0], [5.0, 8.0]])",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(2), dtype='float32')",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(), dtype='float32')",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(2,1), dtype='float32')",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(2,2), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(1,2), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(2,2), dtype='float32')",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(1,2), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(2), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "y = tf.constant([[5.0, 6.0], [7.0, 8.0]])\nx = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant(np.random.randn(2,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x,y):\n  return tf.raw_ops.Xdivy(x=x,y=y)",
    "pytorch": "def pytorch_call(x, y):\n    return x / y"
  },
  "llm_inputs": [
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant([[5.0, 6.0], [7.0, 8.0]])",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant([[2.0, 4.0], [5.0, 8.0]])",
    "x = tf.constant([[1.0, 2.0], [3.0, 4.0]])\ny = tf.constant([[5.0, 6.0], [7.0, 8.0]])"
  ]
}
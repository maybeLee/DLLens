{
  "function_name": "tf.raw_ops.SpaceToDepth(input,block_size,data_format='NHWC',name=None)",
  "inputs": [
    "input",
    "block_size",
    "data_format"
  ],
  "sample_inputs": [
    "input = tf.constant([[[[1], [2]], [[3], [4]]]], dtype=tf.float32)\nblock_size = 2\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]]], dtype=tf.float32)\nblock_size = tf.constant(2, dtype=tf.int32)\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]]], dtype=tf.float32)\ndata_format = 'NHWC'\nblock_size = 2",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,2,2,1), dtype='half')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,2,2,1), dtype='float32')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,2,2,1), dtype='float64')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,2,2,5), dtype='float32')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(4,2,2,1), dtype='float32')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,2,2,1), dtype='float16')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,block_size,data_format='NHWC'):\n  return tf.raw_ops.SpaceToDepth(input=input,block_size=block_size,data_format=data_format)",
    "pytorch": "def pytorch_call(input, block_size, data_format='NHWC'):\n    if data_format != 'NHWC':\n        raise ValueError(\"Currently, only 'NHWC' data format is supported.\")\n    if isinstance(block_size, torch.Tensor):\n        block_size = block_size.item()\n    (n, h, w, c) = input.shape\n    new_h = h // block_size\n    new_w = w // block_size\n    reshaped = input.view(n, new_h, block_size, new_w, block_size, c)\n    permuted = reshaped.permute(0, 1, 3, 2, 4, 5)\n    output = permuted.contiguous().view(n, new_h, new_w, block_size * block_size * c)\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[[[1], [2]], [[3], [4]]]], dtype=tf.float32)\nblock_size = 2\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]]], dtype=tf.float32)\nblock_size = tf.constant(2, dtype=tf.int32)\ndata_format = 'NHWC'"
  ]
}
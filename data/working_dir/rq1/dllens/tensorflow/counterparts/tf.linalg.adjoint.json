{
  "function_name": "tf.linalg.adjoint(matrix,name=None)",
  "inputs": [
    "matrix"
  ],
  "sample_inputs": [
    "matrix = tf.constant([[1, 2], [3, 4]])",
    "matrix = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)",
    "matrix = tf.constant(np.random.randint(-50, 50, (2,2,1,1)), dtype='int32')",
    "matrix = tf.constant(np.random.randint(-50, 50, (1,2)), dtype='int32')",
    "matrix = tf.constant(np.random.randint(-50, 50, (2,5)), dtype='int32')",
    "matrix = tf.constant(np.random.randint(-50, 50, (2,2)), dtype='int32')",
    "matrix = tf.constant(np.random.randint(-50, 50, (2,2,1)), dtype='int32')",
    "matrix = tf.constant(np.random.randint(-50, 50, (2,1)), dtype='int32')",
    "matrix = tf.constant(np.random.randint(-50, 50, (2,2)), dtype='int64')",
    "matrix = tf.constant(np.random.randint(-50, 50, (2,2,1,1,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(matrix):\n  return tf.linalg.adjoint(matrix)",
    "pytorch": "def pytorch_call(matrix):\n    return torch.conj(matrix.transpose(-2, -1))"
  },
  "llm_inputs": [
    "matrix = tf.constant([[1, 2], [3, 4]])",
    "matrix = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)",
    "matrix = tf.constant([[1, 2], [3, 4]])"
  ]
}
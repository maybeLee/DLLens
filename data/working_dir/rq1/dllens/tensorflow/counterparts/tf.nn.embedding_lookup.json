{
  "function_name": "tf.nn.embedding_lookup(params,ids,max_norm=None,name=None)",
  "inputs": [
    "params",
    "ids",
    "max_norm"
  ],
  "sample_inputs": [
    "params = tf.constant([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6], [0.7, 0.8], [0.9, 1.0]])\nids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)",
    "params = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\nids = tf.constant([0, 2, 1])\nmax_norm = tf.constant(5.0)",
    "params = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2], [1.3, 1.4, 1.5]], dtype=tf.float32)\nids = tf.constant([0, 2, 4], dtype=tf.int32)\nmax_norm = tf.constant(1.0, dtype=tf.float32)",
    "ids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)\nparams = tf.constant(np.random.randn(5,2,1), dtype='float32')",
    "ids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)\nparams = tf.constant(np.random.randn(5,1), dtype='float32')",
    "params = tf.constant([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6], [0.7, 0.8], [0.9, 1.0]])\nids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(np.random.randn(), dtype='float32')",
    "ids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)\nparams = tf.constant(np.random.randn(5,2), dtype='float32')",
    "ids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)\nparams = tf.constant(np.random.randn(5), dtype='float32')",
    "ids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)\nparams = tf.constant(np.random.randn(5,2,1,1), dtype='float32')",
    "params = tf.constant([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6], [0.7, 0.8], [0.9, 1.0]])\nids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(np.random.randn(1,1), dtype='float32')",
    "ids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)\nparams = tf.constant(np.random.randn(5,5), dtype='float32')",
    "ids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)\nparams = tf.constant(np.random.randn(5,2,1,1,1), dtype='float32')",
    "params = tf.constant([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6], [0.7, 0.8], [0.9, 1.0]])\nids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(np.random.randn(1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(params,ids,max_norm=None):\n  return tf.nn.embedding_lookup(params,ids,max_norm)",
    "pytorch": "def pytorch_call(params, ids, max_norm=None):\n    if params.dim() == 1:\n        params = params.unsqueeze(1)\n    output = params[ids]\n    if max_norm is not None:\n        norm = output.norm(p=2, dim=1, keepdim=True)\n        output = output * (max_norm / norm).clamp(max=1)\n    return output"
  },
  "llm_inputs": [
    "params = tf.constant([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6], [0.7, 0.8], [0.9, 1.0]])\nids = tf.constant([0, 2, 4])\nmax_norm = tf.constant(1.0)",
    "params = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\nids = tf.constant([0, 2, 1])\nmax_norm = tf.constant(5.0)",
    "params = tf.constant([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2], [1.3, 1.4, 1.5]], dtype=tf.float32)\nids = tf.constant([0, 2, 4], dtype=tf.int32)\nmax_norm = tf.constant(1.0, dtype=tf.float32)"
  ]
}
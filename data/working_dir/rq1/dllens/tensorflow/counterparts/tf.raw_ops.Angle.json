{
  "function_name": "tf.raw_ops.Angle(input,Tout=tf.dtypes.float32,name=None)",
  "inputs": [
    "input",
    "Tout"
  ],
  "sample_inputs": [
    "input = tf.constant([[1.0 + 1j, 2.0 + 2j], [3.0 + 3j, 4.0 + 4j]], dtype=tf.complex64)\nTout = tf.dtypes.float32",
    "input = tf.constant([1.0 + 1j, 0.0 + 0j, -1.0 + 0j, 0.5 + 0.5j], dtype=tf.complex64)\nTout = tf.dtypes.float32",
    "input = tf.constant([1.0 + 2j, 2.0 + 3j, 3.0 + 4j], dtype=tf.complex64)\nTout = tf.dtypes.float32",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(2), dtype='complex64')",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(), dtype='complex64')",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(2,2,1,1), dtype='complex64')",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(2,2), dtype='complex64')",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(2,2,1,1,1), dtype='complex64')",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(2,2,1), dtype='complex64')",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(1,2), dtype='complex64')",
    "Tout = tf.dtypes.float32\ninput = tf.constant(np.random.randn(2,1), dtype='complex64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,Tout=tf.dtypes.float32):\n  return tf.raw_ops.Angle(input=input,Tout=Tout)",
    "pytorch": "def pytorch_call(input, Tout=torch.float32):\n    angle_output = torch.angle(input)\n    return angle_output.to(Tout)"
  },
  "llm_inputs": [
    "input = tf.constant([[1.0 + 1j, 2.0 + 2j], [3.0 + 3j, 4.0 + 4j]], dtype=tf.complex64)\nTout = tf.dtypes.float32",
    "input = tf.constant([1.0 + 1j, 0.0 + 0j, -1.0 + 0j, 0.5 + 0.5j], dtype=tf.complex64)\nTout = tf.dtypes.float32",
    "input = tf.constant([1.0 + 2j, 2.0 + 3j, 3.0 + 4j], dtype=tf.complex64)\nTout = tf.dtypes.float32"
  ]
}
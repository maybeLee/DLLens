{
  "function_name": "tf.raw_ops.BiasAddV1(value,bias,name=None)",
  "inputs": [
    "value",
    "bias"
  ],
  "sample_inputs": [
    "value = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nbias = tf.constant([0.5, 1.5], dtype=tf.float32)",
    "value = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nbias = tf.constant([0.5, 1.0], dtype=tf.float32)",
    "value = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nbias = tf.constant([1.0, 2.0], dtype=tf.float32)",
    "bias = tf.constant([0.5, 1.5], dtype=tf.float32)\nvalue = tf.constant(np.random.randn(5,2), dtype='float32')",
    "bias = tf.constant([0.5, 1.5], dtype=tf.float32)\nvalue = tf.constant(np.random.randn(2,2), dtype='float32')",
    "bias = tf.constant([0.5, 1.5], dtype=tf.float32)\nvalue = tf.constant(np.random.randn(3,2), dtype='float32')",
    "value = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nbias = tf.constant(np.random.randn(2), dtype='float32')",
    "bias = tf.constant([0.5, 1.5], dtype=tf.float32)\nvalue = tf.constant(np.random.randn(1,2), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(value,bias):\n  return tf.raw_ops.BiasAddV1(value=value,bias=bias)",
    "pytorch": "def pytorch_call(value, bias):\n    return value + bias.view(1, -1)"
  },
  "llm_inputs": [
    "value = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nbias = tf.constant([0.5, 1.5], dtype=tf.float32)",
    "value = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nbias = tf.constant([0.5, 1.0], dtype=tf.float32)",
    "value = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nbias = tf.constant([1.0, 2.0], dtype=tf.float32)"
  ]
}
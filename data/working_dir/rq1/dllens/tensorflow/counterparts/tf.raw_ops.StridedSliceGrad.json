{
  "function_name": "tf.raw_ops.StridedSliceGrad(shape,begin,end,strides,dy,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,name=None)",
  "inputs": [
    "shape",
    "begin",
    "end",
    "strides",
    "dy",
    "begin_mask",
    "end_mask",
    "ellipsis_mask",
    "new_axis_mask",
    "shrink_axis_mask"
  ],
  "sample_inputs": [
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nbegin_mask = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(np.random.randint(-50, 50, (1,1,1,1,1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(np.random.randint(-50, 50, (1,1,1,1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nbegin_mask = tf.constant(np.random.randint(-50, 50, (1,1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nbegin_mask = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nbegin_mask = tf.constant(np.random.randint(-50, 50, ()), dtype='int64')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(np.random.randint(-50, 50, (1,1,1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nbegin_mask = tf.constant(np.random.randint(-50, 50, (1,1,1,1,1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(np.random.randint(-50, 50, ()), dtype='int64')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\ndy = tf.constant(np.random.randn(2,3), dtype='half')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nbegin_mask = tf.constant(np.random.randint(-50, 50, (1,1,1,1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\ndy = tf.constant(np.random.randn(2,3), dtype='float16')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(np.random.randint(-50, 50, (1,1)), dtype='int32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\ndy = tf.constant(np.random.randn(2,3), dtype='float32')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\ndy = tf.constant(np.random.randn(2,3), dtype='float64')",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)\nbegin_mask = tf.constant(np.random.randint(-50, 50, (1,1,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(shape,begin,end,strides,dy,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0):\n  return tf.raw_ops.StridedSliceGrad(shape=shape,begin=begin,end=end,strides=strides,dy=dy,begin_mask=begin_mask,end_mask=end_mask,ellipsis_mask=ellipsis_mask,new_axis_mask=new_axis_mask,shrink_axis_mask=shrink_axis_mask)",
    "pytorch": "def pytorch_call(shape, begin, end, strides, dy, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0):\n    shape = shape.tolist()\n    begin = begin.tolist()\n    end = end.tolist()\n    strides = strides.tolist()\n    output_shape = [end[i] - begin[i] for i in range(len(shape))]\n    output = torch.zeros(output_shape, dtype=dy.dtype)\n    for i in range(output.shape[0]):\n        for j in range(output.shape[1]):\n            output[i, j] = dy[begin[0] + i * strides[0], begin[1] + j * strides[1]]\n    return output"
  },
  "llm_inputs": [
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)",
    "shape = tf.constant([2, 3], dtype=tf.int32)\nbegin = tf.constant([0, 0], dtype=tf.int32)\nend = tf.constant([2, 3], dtype=tf.int32)\nstrides = tf.constant([1, 1], dtype=tf.int32)\ndy = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nbegin_mask = tf.constant(0, dtype=tf.int32)\nend_mask = tf.constant(0, dtype=tf.int32)\nellipsis_mask = tf.constant(0, dtype=tf.int32)\nnew_axis_mask = tf.constant(0, dtype=tf.int32)\nshrink_axis_mask = tf.constant(0, dtype=tf.int32)"
  ]
}
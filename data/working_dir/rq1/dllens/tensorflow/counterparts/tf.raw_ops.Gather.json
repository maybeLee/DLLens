{
  "function_name": "tf.raw_ops.Gather(params,indices,validate_indices=True,name=None)",
  "inputs": [
    "params",
    "indices",
    "validate_indices"
  ],
  "sample_inputs": [
    "params = tf.constant([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=tf.int32)\nindices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True",
    "params = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nindices = tf.constant([0, 1], dtype=tf.int32)\nvalidate_indices = True",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,3)), dtype='int64')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,3)), dtype='int32')",
    "params = tf.constant([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=tf.int32)\nindices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = False",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (5,3)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,5)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,4)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,3,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,3,1,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,3,1,1,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True\nparams = tf.constant(np.random.randint(-50, 50, (3,2)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(params,indices,validate_indices=True):\n  return tf.raw_ops.Gather(params=params,indices=indices,validate_indices=validate_indices)",
    "pytorch": "def pytorch_call(params, indices, validate_indices=True):\n    if validate_indices:\n        if indices.max() >= params.size(0) or indices.min() < 0:\n            raise IndexError('Index out of bounds.')\n    return params[indices]"
  },
  "llm_inputs": [
    "params = tf.constant([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=tf.int32)\nindices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True",
    "params = tf.constant([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=tf.int32)\nindices = tf.constant([0, 2], dtype=tf.int32)\nvalidate_indices = True",
    "params = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nindices = tf.constant([0, 1], dtype=tf.int32)\nvalidate_indices = True"
  ]
}
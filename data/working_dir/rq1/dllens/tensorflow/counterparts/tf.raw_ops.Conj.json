{
  "function_name": "tf.raw_ops.Conj(input,name=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.complex64)",
    "input = tf.constant([[1 + 2j, 3 + 4j], [5 + 6j, 7 + 8j]], dtype=tf.complex64)",
    "input = tf.constant(np.random.randn(2,1), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2,1,1), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2), dtype='complex128')",
    "input = tf.constant(np.random.randn(2,2,1), dtype='complex64')",
    "input = tf.constant(np.random.randn(), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2,1,1,1), dtype='complex64')",
    "input = tf.constant(np.random.randn(5,2), dtype='complex64')",
    "input = tf.constant(np.random.randn(1,2), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,4), dtype='complex64')",
    "input = tf.constant(np.random.randn(2), dtype='complex64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input):\n  return tf.raw_ops.Conj(input=input)",
    "pytorch": "def pytorch_call(input):\n    return input.conj().real + 1j * input.conj().imag"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.complex64)",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.complex64)",
    "input = tf.constant([[1 + 2j, 3 + 4j], [5 + 6j, 7 + 8j]], dtype=tf.complex64)"
  ]
}
{
  "function_name": "tf.raw_ops.GuaranteeConst(input,name=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = tf.constant([1, 2, 3], dtype=tf.int32)",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.int32)",
    "input = tf.constant(np.random.randint(-50, 50, (3,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (3)), dtype='int64')",
    "input = tf.constant(np.random.randint(-50, 50, (3,1,1,1,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (3)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (3,1,1,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (5)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (3,1,1)), dtype='int32')",
    "input = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input):\n  return tf.raw_ops.GuaranteeConst(input=input)",
    "pytorch": "def pytorch_call(input):\n    return input.clone().detach()"
  },
  "llm_inputs": [
    "input = tf.constant([1, 2, 3], dtype=tf.int32)",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.int32)"
  ]
}
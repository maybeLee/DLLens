{
  "function_name": "tf.math.special.fresnel_cos(x,name=None)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([0.1, 0.5, 0.9])",
    "x = tf.constant([0.0, 0.5, 1.0, 1.5, 2.0])",
    "x = tf.constant([0.1, 0.2, 0.3, 0.4, 0.5], dtype=tf.float32)",
    "x = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float32')",
    "x = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float64')",
    "x = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.math.special.fresnel_cos(x)",
    "pytorch": "def pytorch_call(x):\n\n    def fresnel_cosine_integral(val):\n        t = torch.linspace(0, val.item(), steps=1000)\n        integrand = torch.cos(torch.pi / 2 * t ** 2)\n        integral = torch.trapz(integrand, t)\n        return integral\n    return torch.tensor([fresnel_cosine_integral(val) for val in x.flatten()])"
  },
  "llm_inputs": [
    "x = tf.constant([0.1, 0.5, 0.9])",
    "x = tf.constant([0.0, 0.5, 1.0, 1.5, 2.0])",
    "x = tf.constant([0.1, 0.2, 0.3, 0.4, 0.5], dtype=tf.float32)"
  ]
}
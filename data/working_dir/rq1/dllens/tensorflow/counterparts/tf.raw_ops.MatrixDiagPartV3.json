{
  "function_name": "tf.raw_ops.MatrixDiagPartV3(input,k,padding_value,align='RIGHT_LEFT',name=None)",
  "inputs": [
    "input",
    "k",
    "padding_value",
    "align"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'",
    "k = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\ninput = tf.constant(np.random.randint(-50, 50, (1,3)), dtype='int32')",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\npadding_value = tf.constant(np.random.randint(-50, 50, (1,1,1,1,1)), dtype='int32')",
    "k = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\ninput = tf.constant(np.random.randint(-50, 50, (5,3)), dtype='int32')",
    "k = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\ninput = tf.constant(np.random.randint(-50, 50, (2,3)), dtype='int32')",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\npadding_value = tf.constant(np.random.randint(-50, 50, (1,1)), dtype='int32')",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\npadding_value = tf.constant(np.random.randint(-50, 50, (1,1,1)), dtype='int32')",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\npadding_value = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "k = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\ninput = tf.constant(np.random.randint(-50, 50, (2,5)), dtype='int32')",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\npadding_value = tf.constant(np.random.randint(-50, 50, (1,1,1,1)), dtype='int32')",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\nalign = 'RIGHT_LEFT'\npadding_value = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,k,padding_value,align='RIGHT_LEFT'):\n  return tf.raw_ops.MatrixDiagPartV3(input=input,k=k,padding_value=padding_value,align=align)",
    "pytorch": "def pytorch_call(input, k, padding_value, align='RIGHT_LEFT'):\n    if input.dim() != 2:\n        raise ValueError('Input must be a 2D tensor')\n    (rows, cols) = input.shape\n    if align == 'RIGHT_LEFT':\n        if k > 0:\n            diag_indices = [(i, i + k) for i in range(rows) if i + k < cols]\n        elif k < 0:\n            diag_indices = [(i - abs(k), i) for i in range(cols) if i - abs(k) >= 0]\n        else:\n            diag_indices = [(i, i) for i in range(min(rows, cols))]\n    else:\n        raise ValueError('Unsupported alignment option')\n    result = torch.full((len(diag_indices),), padding_value.item(), dtype=input.dtype)\n    for (idx, (i, j)) in enumerate(diag_indices):\n        result[idx] = input[i, j]\n    return result"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nk = tf.constant(1, dtype=tf.int32)\npadding_value = tf.constant(0, dtype=tf.int32)\nalign = 'RIGHT_LEFT'"
  ]
}
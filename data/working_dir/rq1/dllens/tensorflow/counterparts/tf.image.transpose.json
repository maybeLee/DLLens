{
  "function_name": "tf.image.transpose(image,name=None)",
  "inputs": [
    "image"
  ],
  "sample_inputs": [
    "image = tf.constant([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[1, 3, 5], [7, 9, 2], [4, 6, 8]]])",
    "image = tf.constant([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24], [25, 26, 27]]])",
    "image = tf.constant([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])",
    "image = tf.constant(np.random.randint(-50, 50, (3,3,3)), dtype='int32')",
    "image = tf.constant(np.random.randint(-50, 50, (3,3,3,1)), dtype='int32')",
    "image = tf.constant(np.random.randint(-50, 50, (3,3,5)), dtype='int32')",
    "image = tf.constant(np.random.randint(-50, 50, (3,3,3)), dtype='int64')",
    "image = tf.constant(np.random.randint(-50, 50, (3,1,3)), dtype='int32')",
    "image = tf.constant(np.random.randint(-50, 50, (3,2,3)), dtype='int32')",
    "image = tf.constant(np.random.randint(-50, 50, (3,3,1)), dtype='int32')",
    "image = tf.constant(np.random.randint(-50, 50, (5,3,3)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(image):\n  return tf.image.transpose(image)",
    "pytorch": "def pytorch_call(image):\n    return image.permute(0, 2, 1, 3) if image.dim() == 4 else image.permute(1, 0, 2)"
  },
  "llm_inputs": [
    "image = tf.constant([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[1, 3, 5], [7, 9, 2], [4, 6, 8]]])",
    "image = tf.constant([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24], [25, 26, 27]]])",
    "image = tf.constant([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])"
  ]
}
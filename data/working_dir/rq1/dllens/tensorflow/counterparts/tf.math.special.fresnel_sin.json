{
  "function_name": "tf.math.special.fresnel_sin(x,name=None)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([0.1, 0.2, 0.3, 0.4, 0.5])",
    "x = tf.constant([0.1, 0.5, 0.9])",
    "x = tf.constant(np.random.randn(1), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float64')",
    "x = tf.constant(np.random.randn(5,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1), dtype='float32')",
    "x = tf.constant(np.random.randn(), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.math.special.fresnel_sin(x)",
    "pytorch": "def pytorch_call(x):\n\n    def fresnel_sin(t):\n        t = t.item() if t.numel() == 1 else t\n        n = 1000\n        t_values = torch.linspace(0, t, n)\n        integrand = torch.sin(torch.pi / 2 * t_values ** 2)\n        return (t_values[1] - t_values[0]) * (integrand[0] + 2 * integrand[1:-1].sum() + integrand[-1]) / 2\n    return torch.tensor([fresnel_sin(val) for val in x.flatten()])"
  },
  "llm_inputs": [
    "x = tf.constant([0.1, 0.2, 0.3, 0.4, 0.5])",
    "x = tf.constant([0.1, 0.5, 0.9])",
    "x = tf.constant([0.1, 0.5, 0.9])"
  ]
}
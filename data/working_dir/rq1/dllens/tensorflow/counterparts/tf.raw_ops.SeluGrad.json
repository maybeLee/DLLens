{
  "function_name": "tf.raw_ops.SeluGrad(gradients,outputs,name=None)",
  "inputs": [
    "gradients",
    "outputs"
  ],
  "sample_inputs": [
    "gradients = tf.constant([0.5, -0.3, 0.1], dtype=tf.float32)\noutputs = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "gradients = tf.constant([0.5, -0.5, 1.0, -1.0], dtype=tf.float32)\noutputs = tf.constant([1.0, 0.0, -1.0, 2.0], dtype=tf.float32)",
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\noutputs = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "gradients = tf.constant([0.5, -0.3, 0.1], dtype=tf.float32)\noutputs = tf.constant(np.random.randn(3), dtype='float32')",
    "outputs = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ngradients = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(gradients,outputs):\n  return tf.raw_ops.SeluGrad(gradients=gradients,outputs=outputs)",
    "pytorch": "def pytorch_call(gradients, outputs):\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    selu_grad = torch.where(outputs > 0, scale * gradients, torch.where(outputs < 0, scale * gradients * (outputs + alpha), scale * gradients))\n    return selu_grad"
  },
  "llm_inputs": [
    "gradients = tf.constant([0.5, -0.3, 0.1], dtype=tf.float32)\noutputs = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "gradients = tf.constant([0.5, -0.5, 1.0, -1.0], dtype=tf.float32)\noutputs = tf.constant([1.0, 0.0, -1.0, 2.0], dtype=tf.float32)",
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\noutputs = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)"
  ]
}
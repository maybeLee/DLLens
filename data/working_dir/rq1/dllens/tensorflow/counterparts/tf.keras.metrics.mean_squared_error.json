{
  "function_name": "tf.keras.metrics.mean_squared_error(y_true,y_pred)",
  "inputs": [
    "y_true",
    "y_pred"
  ],
  "sample_inputs": [
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 2.0], dtype=tf.float32)",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float16')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float64')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float64')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='half')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='half')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float16')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "y_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)\ny_true = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(1), dtype='float32')",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(y_true,y_pred):\n  return tf.keras.metrics.mean_squared_error(y_true,y_pred)",
    "pytorch": "def pytorch_call(y_true, y_pred):\n    mse = (y_true - y_pred) ** 2\n    return mse.mean(dim=-1, keepdim=True)"
  },
  "llm_inputs": [
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 2.0], dtype=tf.float32)",
    "y_true = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ny_pred = tf.constant([1.5, 2.5, 3.5], dtype=tf.float32)"
  ]
}
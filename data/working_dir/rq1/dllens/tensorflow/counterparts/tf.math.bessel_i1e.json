{
  "function_name": "tf.math.bessel_i1e(x,name=None)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "x = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float16')",
    "x = tf.constant(np.random.randn(3), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='float64')",
    "x = tf.constant(np.random.randn(1), dtype='float32')",
    "x = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant(np.random.randn(2), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(3), dtype='half')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.math.bessel_i1e(x)",
    "pytorch": "def pytorch_call(x):\n    if x.dtype == torch.float16:\n        x = x.to(torch.float32)\n    return torch.special.i1e(x)"
  },
  "llm_inputs": [
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)"
  ]
}
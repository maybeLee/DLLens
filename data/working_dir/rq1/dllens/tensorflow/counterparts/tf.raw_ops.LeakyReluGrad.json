{
  "function_name": "tf.raw_ops.LeakyReluGrad(gradients,features,alpha=0.2,name=None)",
  "inputs": [
    "gradients",
    "features",
    "alpha"
  ],
  "sample_inputs": [
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = 0.2",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[0.5], [0.5], [0.5]], dtype=tf.float32)\nalpha = 0.2",
    "gradients = tf.constant([[0.1], [-0.2], [0.3]], dtype=tf.float32)\nfeatures = tf.constant([[0.5], [-0.5], [0.7]], dtype=tf.float32)\nalpha = 0.2",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = 76.98",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nalpha = 0.2\nfeatures = tf.constant(np.random.randn(3,1), dtype='float32')",
    "features = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = 0.2\ngradients = tf.constant(np.random.randn(3,1), dtype='float32')",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = 56.52",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = 74.79",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = -21.48",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = -96.56"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(gradients,features,alpha=0.2):\n  return tf.raw_ops.LeakyReluGrad(gradients=gradients,features=features,alpha=alpha)",
    "pytorch": "def pytorch_call(gradients, features, alpha=0.2):\n    mask = features < 0\n    output_gradients = gradients.clone()\n    output_gradients[mask] *= alpha\n    return output_gradients"
  },
  "llm_inputs": [
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[1.0], [2.0], [3.0]], dtype=tf.float32)\nalpha = 0.2",
    "gradients = tf.constant([[0.1], [0.2], [-0.3]], dtype=tf.float32)\nfeatures = tf.constant([[0.5], [0.5], [0.5]], dtype=tf.float32)\nalpha = 0.2",
    "gradients = tf.constant([[0.1], [-0.2], [0.3]], dtype=tf.float32)\nfeatures = tf.constant([[0.5], [-0.5], [0.7]], dtype=tf.float32)\nalpha = 0.2"
  ]
}
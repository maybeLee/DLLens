{
  "function_name": "tf.raw_ops.CheckNumerics(tensor,message,name=None)",
  "inputs": [
    "tensor",
    "message"
  ],
  "sample_inputs": [
    "tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nmessage = 'Tensor contains invalid values.'",
    "tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nmessage = 'Check for NaN or Inf values'",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,5), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,4), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,2), dtype='half')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,2), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,2), dtype='float64')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,1), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,2), dtype='float16')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(1,2), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(5,2), dtype='float32')",
    "message = 'Tensor contains invalid values.'\ntensor = tf.constant(np.random.randn(2,2,1,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(tensor,message):\n  return tf.raw_ops.CheckNumerics(tensor=tensor,message=message)",
    "pytorch": "def pytorch_call(tensor, message):\n    if torch.isnan(tensor).any() or torch.isinf(tensor).any():\n        raise ValueError(message)\n    return tensor"
  },
  "llm_inputs": [
    "tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nmessage = 'Tensor contains invalid values.'",
    "tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nmessage = 'Check for NaN or Inf values'",
    "tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)\nmessage = 'Check for NaN or Inf values'"
  ]
}
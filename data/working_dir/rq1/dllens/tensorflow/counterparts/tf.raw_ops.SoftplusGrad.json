{
  "function_name": "tf.raw_ops.SoftplusGrad(gradients,features,name=None)",
  "inputs": [
    "gradients",
    "features"
  ],
  "sample_inputs": [
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\nfeatures = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\nfeatures = tf.constant([0.5, 1.0, 1.5], dtype=tf.float32)",
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\nfeatures = tf.constant(np.random.randn(3), dtype='float32')",
    "features = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\ngradients = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(gradients,features):\n  return tf.raw_ops.SoftplusGrad(gradients=gradients,features=features)",
    "pytorch": "def pytorch_call(gradients, features):\n    features.requires_grad_(True)\n    softplus_output = torch.nn.functional.softplus(features)\n    softplus_grad = torch.autograd.grad(outputs=softplus_output, inputs=features, grad_outputs=gradients, retain_graph=True)[0]\n    return softplus_grad"
  },
  "llm_inputs": [
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\nfeatures = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)",
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\nfeatures = tf.constant([0.5, 1.0, 1.5], dtype=tf.float32)",
    "gradients = tf.constant([0.1, 0.2, 0.3], dtype=tf.float32)\nfeatures = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)"
  ]
}
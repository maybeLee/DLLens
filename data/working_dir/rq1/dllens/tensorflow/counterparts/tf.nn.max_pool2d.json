{
  "function_name": "tf.nn.max_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)",
  "inputs": [
    "input",
    "ksize",
    "strides",
    "padding",
    "data_format"
  ],
  "sample_inputs": [
    "input = tf.constant([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]], dtype=tf.float32)\nksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]], dtype=tf.float32)\nksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 2, 2, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(2,2,5,1), dtype='float32')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(4,2,2,1), dtype='float32')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(2,2,2,5), dtype='float32')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(2,2,2,1), dtype='float16')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(2,2,2,1), dtype='half')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(5,2,2,1), dtype='float32')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(2,2,2,1), dtype='float32')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(2,2,2,1), dtype='float64')",
    "ksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randn(1,2,2,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,ksize,strides,padding,data_format='NHWC'):\n  return tf.nn.max_pool2d(input,ksize,strides,padding,data_format)",
    "pytorch": "def pytorch_call(input, ksize, strides, padding, data_format='NHWC'):\n    ksize = ksize.tolist()\n    strides = strides.tolist()\n    if data_format == 'NHWC':\n        input = input.permute(0, 3, 1, 2)\n    pad = (0, 0)\n    if input.dtype == torch.float16:\n        input = input.to(torch.float32)\n    output = F.max_pool2d(input, kernel_size=ksize[1:3], stride=strides[1:3], padding=pad)\n    if data_format == 'NHWC':\n        output = output.permute(0, 2, 3, 1)\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]], dtype=tf.float32)\nksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]], dtype=tf.float32)\nksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]], dtype=tf.float32)\nksize = tf.constant([1, 2, 2, 1], dtype=tf.int32)\nstrides = tf.constant([1, 2, 2, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NHWC'"
  ]
}
{
  "function_name": "tf.nn.space_to_depth(input,block_size,data_format='NHWC',name=None)",
  "inputs": [
    "input",
    "block_size",
    "data_format"
  ],
  "sample_inputs": [
    "input = tf.constant([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]], dtype=tf.int32)\nblock_size = 2\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]]], dtype=tf.float32)\nblock_size = 2\ndata_format = 'NHWC'",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randint(-50, 50, (1,2,2,5)), dtype='int32')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randint(-50, 50, (1,2,2,2)), dtype='int32')",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randint(-50, 50, (1,2,2,2)), dtype='int64')",
    "input = tf.constant([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]], dtype=tf.int32)\ndata_format = 'NHWC'\nblock_size = 2",
    "block_size = 2\ndata_format = 'NHWC'\ninput = tf.constant(np.random.randint(-50, 50, (1,2,2,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,block_size,data_format='NHWC'):\n  return tf.nn.space_to_depth(input,block_size,data_format)",
    "pytorch": "def pytorch_call(input, block_size, data_format='NHWC'):\n    if data_format != 'NHWC':\n        raise ValueError(\"Currently only 'NHWC' data format is supported.\")\n    (n, h, w, c) = input.shape\n    input_reshaped = input.view(n, h // block_size, block_size, w // block_size, block_size, c)\n    output = input_reshaped.permute(0, 1, 3, 2, 4, 5).contiguous()\n    output = output.view(n, h // block_size, w // block_size, block_size * block_size * c)\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]], dtype=tf.int32)\nblock_size = 2\ndata_format = 'NHWC'",
    "input = tf.constant([[[[1], [2]], [[3], [4]]]], dtype=tf.float32)\nblock_size = 2\ndata_format = 'NHWC'"
  ]
}
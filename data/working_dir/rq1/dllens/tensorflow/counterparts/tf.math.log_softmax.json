{
  "function_name": "tf.math.log_softmax(logits,axis=None,name=None)",
  "inputs": [
    "logits",
    "axis"
  ],
  "sample_inputs": [
    "logits = tf.constant([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\naxis = 1",
    "logits = tf.constant([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\naxis = -2",
    "axis = 1\nlogits = tf.constant(np.random.randn(5,3), dtype='float32')",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,3), dtype='float16')",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,3), dtype='float64')",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,3), dtype='half')",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,1), dtype='float32')",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,5), dtype='float32')",
    "logits = tf.constant([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\naxis = -1",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,3), dtype='float32')",
    "logits = tf.constant([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\naxis = 0",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,3,1,1,1), dtype='float32')",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,3,1,1), dtype='float32')",
    "axis = 1\nlogits = tf.constant(np.random.randn(2,3,1), dtype='float32')",
    "axis = 1\nlogits = tf.constant(np.random.randn(1,3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(logits,axis=None):\n  return tf.math.log_softmax(logits,axis)",
    "pytorch": "def pytorch_call(logits, axis=None):\n    if axis is None:\n        axis = -1\n    if logits.dtype == torch.float16:\n        logits = logits.to(torch.float32)\n    return torch.nn.functional.log_softmax(logits, dim=axis)"
  },
  "llm_inputs": [
    "logits = tf.constant([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\naxis = 1",
    "logits = tf.constant([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\naxis = 1",
    "logits = tf.constant([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\naxis = 1"
  ]
}
{
  "function_name": "tf.image.rgb_to_grayscale(images,name=None)",
  "inputs": [
    "images"
  ],
  "sample_inputs": [
    "images = tf.constant([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], dtype=tf.float32)",
    "images = tf.constant([[[255, 0, 0], [0, 255, 0]], [[0, 0, 255], [255, 255, 0]]], dtype=tf.float32)",
    "images = tf.constant([[[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]], [[0.0, 0.0, 1.0], [1.0, 1.0, 0.0]]]])",
    "images = tf.constant(np.random.randn(2,5,3), dtype='float32')",
    "images = tf.constant(np.random.randn(1,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='half')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float16')",
    "images = tf.constant(np.random.randn(5,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(3,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(images):\n  return tf.image.rgb_to_grayscale(images)",
    "pytorch": "def pytorch_call(images):\n    if images.dim() == 3:\n        if images.size(2) != 3:\n            raise ValueError('Input tensor must have 3 channels for RGB images.')\n        grayscale_images = 0.2989 * images[:, :, 0] + 0.587 * images[:, :, 1] + 0.114 * images[:, :, 2]\n        return grayscale_images.unsqueeze(2)\n    elif images.dim() == 4:\n        if images.size(3) != 3:\n            raise ValueError('Input tensor must have 3 channels for RGB images.')\n        grayscale_images = 0.2989 * images[:, :, :, 0] + 0.587 * images[:, :, :, 1] + 0.114 * images[:, :, :, 2]\n        return grayscale_images.unsqueeze(1)\n    else:\n        raise ValueError('Input tensor must have 3 or 4 dimensions.')"
  },
  "llm_inputs": [
    "images = tf.constant([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], dtype=tf.float32)",
    "images = tf.constant([[[255, 0, 0], [0, 255, 0]], [[0, 0, 255], [255, 255, 0]]], dtype=tf.float32)",
    "images = tf.constant([[[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]], [[0.0, 0.0, 1.0], [1.0, 1.0, 0.0]]]])"
  ]
}
{
  "function_name": "tf.nn.conv1d(input,filters,stride,padding,data_format='NWC',dilations=None,name=None)",
  "inputs": [
    "input",
    "filters",
    "stride",
    "padding",
    "data_format",
    "dilations"
  ],
  "sample_inputs": [
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\nstride = 1\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None",
    "input = tf.constant([[[1.0], [2.0], [3.0], [4.0], [5.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0]], [[0.0]], [[-1.0]]], dtype=tf.float32)\nstride = 1\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None",
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None\nstride = 1",
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None\nstride = 5",
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None\nstride = 2",
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None\nstride = 3",
    "filters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\nstride = 1\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None\ninput = tf.constant(np.random.randn(1,1,3), dtype='float32')",
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None\nstride = 4",
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nstride = 1\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None\nfilters = tf.constant(np.random.randn(1,3,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,filters,stride,padding,data_format='NWC',dilations=None):\n  return tf.nn.conv1d(input,filters,stride,padding,data_format,dilations)",
    "pytorch": "def pytorch_call(input, filters, stride, padding, data_format='NWC', dilations=None):\n    if data_format == 'NWC':\n        input = input.permute(0, 2, 1)\n    filters = filters.permute(2, 1, 0)\n    if padding == 'VALID':\n        padding = 0\n    else:\n        raise ValueError(\"Only 'VALID' padding is supported in this implementation.\")\n    output = F.conv1d(input, filters, stride=stride, padding=padding)\n    if data_format == 'NWC':\n        output = output.permute(0, 2, 1)\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[[1.0, 2.0, 3.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0], [0.0], [-1.0]]], dtype=tf.float32)\nstride = 1\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None",
    "input = tf.constant([[[1.0], [2.0], [3.0], [4.0], [5.0]]], dtype=tf.float32)\nfilters = tf.constant([[[1.0]], [[0.0]], [[-1.0]]], dtype=tf.float32)\nstride = 1\npadding = 'VALID'\ndata_format = 'NWC'\ndilations = None"
  ]
}
{
  "function_name": "tf.raw_ops.NextAfter(x1,x2,name=None)",
  "inputs": [
    "x1",
    "x2"
  ],
  "sample_inputs": [
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)",
    "x1 = tf.constant(1.0)\nx2 = tf.constant(2.0)",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant(np.random.randn(3), dtype='float32')",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant(np.random.randn(), dtype='float32')",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\nx1 = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\nx1 = tf.constant(np.random.randn(3), dtype='float32')",
    "x2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\nx1 = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "x2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\nx1 = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\nx1 = tf.constant(np.random.randn(), dtype='float32')",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant(np.random.randn(1), dtype='float32')",
    "x2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\nx1 = tf.constant(np.random.randn(1), dtype='float32')",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)\nx1 = tf.constant(np.random.randn(3,1,1,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x1,x2):\n  return tf.raw_ops.NextAfter(x1=x1,x2=x2)",
    "pytorch": "def pytorch_call(x1, x2):\n    return torch.where(x1 < x2, torch.nextafter(x1, x2), torch.nextafter(x1, x2, out=torch.empty_like(x1)))"
  },
  "llm_inputs": [
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)",
    "x1 = tf.constant(1.0)\nx2 = tf.constant(2.0)",
    "x1 = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nx2 = tf.constant([4.0, 5.0, 6.0], dtype=tf.float32)"
  ]
}
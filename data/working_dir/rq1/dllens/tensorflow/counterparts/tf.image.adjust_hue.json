{
  "function_name": "tf.image.adjust_hue(image,delta,name=None)",
  "inputs": [
    "image",
    "delta"
  ],
  "sample_inputs": [
    "image = tf.constant([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]]], dtype=tf.float32)\ndelta = tf.constant(0.1, dtype=tf.float32)",
    "image = tf.constant([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.0, 1.0]]], dtype=tf.float32)\ndelta = tf.constant(0.2, dtype=tf.float32)",
    "image = tf.constant([[[0.0, 0.5, 1.0]], [[0.2, 0.7, 0.9]], [[0.1, 0.3, 0.8]]])\ndelta = tf.constant(0.1)",
    "delta = tf.constant(0.1, dtype=tf.float32)\nimage = tf.constant(np.random.randn(2,2,3), dtype='float32')",
    "image = tf.constant([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]]], dtype=tf.float32)\ndelta = tf.constant(np.random.randn(), dtype='float32')",
    "delta = tf.constant(0.1, dtype=tf.float32)\nimage = tf.constant(np.random.randn(2,1,3), dtype='float32')",
    "delta = tf.constant(0.1, dtype=tf.float32)\nimage = tf.constant(np.random.randn(5,2,3), dtype='float32')",
    "delta = tf.constant(0.1, dtype=tf.float32)\nimage = tf.constant(np.random.randn(2,5,3), dtype='float32')",
    "delta = tf.constant(0.1, dtype=tf.float32)\nimage = tf.constant(np.random.randn(2,2,3), dtype='float64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(image,delta):\n  return tf.image.adjust_hue(image,delta)",
    "pytorch": "def pytorch_call(image, delta):\n    (r, g, b) = image.unbind(dim=-1)\n    max_rgb = torch.max(image, dim=-1)[0]\n    min_rgb = torch.min(image, dim=-1)[0]\n    delta_rgb = max_rgb - min_rgb\n    hue = torch.zeros_like(max_rgb)\n    hue[delta_rgb != 0] = torch.where(max_rgb[delta_rgb != 0] == r[delta_rgb != 0], (g[delta_rgb != 0] - b[delta_rgb != 0]) / delta_rgb[delta_rgb != 0], torch.where(max_rgb[delta_rgb != 0] == g[delta_rgb != 0], 2.0 + (b[delta_rgb != 0] - r[delta_rgb != 0]) / delta_rgb[delta_rgb != 0], 4.0 + (r[delta_rgb != 0] - g[delta_rgb != 0]) / delta_rgb[delta_rgb != 0]))\n    hue = hue / 6.0 % 1.0\n    hue = (hue + delta.item()) % 1.0\n    c = max_rgb - min_rgb\n    x = c * (1 - torch.abs(hue * 6 % 2 - 1))\n    m = min_rgb\n    r_prime = torch.zeros_like(max_rgb)\n    g_prime = torch.zeros_like(max_rgb)\n    b_prime = torch.zeros_like(max_rgb)\n    mask = hue < 1 / 6\n    r_prime[mask] = c[mask]\n    g_prime[mask] = x[mask]\n    mask = (1 / 6 <= hue) & (hue < 1 / 3)\n    r_prime[mask] = x[mask]\n    g_prime[mask] = c[mask]\n    mask = (1 / 3 <= hue) & (hue < 1 / 2)\n    g_prime[mask] = c[mask]\n    b_prime[mask] = x[mask]\n    mask = (1 / 2 <= hue) & (hue < 2 / 3)\n    g_prime[mask] = x[mask]\n    b_prime[mask] = c[mask]\n    mask = (2 / 3 <= hue) & (hue < 5 / 6)\n    r_prime[mask] = x[mask]\n    b_prime[mask] = c[mask]\n    mask = (5 / 6 <= hue) & (hue <= 1)\n    r_prime[mask] = c[mask]\n    b_prime[mask] = x[mask]\n    r_prime += m\n    g_prime += m\n    b_prime += m\n    adjusted_image = torch.stack((r_prime, g_prime, b_prime), dim=-1)\n    return adjusted_image"
  },
  "llm_inputs": [
    "image = tf.constant([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]]], dtype=tf.float32)\ndelta = tf.constant(0.1, dtype=tf.float32)",
    "image = tf.constant([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.0, 1.0]]], dtype=tf.float32)\ndelta = tf.constant(0.2, dtype=tf.float32)",
    "image = tf.constant([[[0.0, 0.5, 1.0]], [[0.2, 0.7, 0.9]], [[0.1, 0.3, 0.8]]])\ndelta = tf.constant(0.1)"
  ]
}
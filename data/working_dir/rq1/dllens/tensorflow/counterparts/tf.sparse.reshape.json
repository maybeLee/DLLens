{
  "function_name": "tf.sparse.reshape(sp_input,shape,name=None)",
  "inputs": [
    "sp_input",
    "shape"
  ],
  "sample_inputs": [
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 1]], values=[1, 2], dense_shape=[2, 2])\nshape = tf.constant([2, 2], dtype=tf.int32)",
    "sp_input = tf.constant([[1, 0, 0], [0, 0, 2], [0, 3, 0]], dtype=tf.float32)\nsp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 2], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\nshape = tf.constant([3, 3], dtype=tf.int32)",
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 1], [2, 2]], values=[1, 2, 3], dense_shape=[3, 3])\nshape = tf.constant([1, 9], dtype=tf.int32)"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(sp_input,shape):\n  return tf.sparse.reshape(sp_input,shape)",
    "pytorch": "def pytorch_call(sp_input, shape):\n    if isinstance(sp_input, torch.Tensor) and sp_input.dim() == 2:\n        indices = sp_input.nonzero(as_tuple=True)\n        values = sp_input[indices]\n        sparse_tensor = torch.sparse_coo_tensor(indices, values, size=shape)\n    else:\n        sparse_tensor = sp_input\n    return sparse_tensor"
  },
  "llm_inputs": [
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 1]], values=[1, 2], dense_shape=[2, 2])\nshape = tf.constant([2, 2], dtype=tf.int32)",
    "sp_input = tf.constant([[1, 0, 0], [0, 0, 2], [0, 3, 0]], dtype=tf.float32)\nsp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 2], [2, 1]], values=[1, 2, 3], dense_shape=[3, 3])\nshape = tf.constant([3, 3], dtype=tf.int32)",
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 1], [2, 2]], values=[1, 2, 3], dense_shape=[3, 3])\nshape = tf.constant([1, 9], dtype=tf.int32)"
  ]
}
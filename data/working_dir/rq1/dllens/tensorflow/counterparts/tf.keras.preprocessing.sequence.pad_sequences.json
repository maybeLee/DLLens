{
  "function_name": "tf.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)",
  "inputs": [
    "sequences",
    "maxlen",
    "dtype",
    "padding",
    "truncating",
    "value"
  ],
  "sample_inputs": [
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0",
    "sequences = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0",
    "sequences = [[1, 2, 3], [4, 5], [6]]\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0\nmaxlen = 1",
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = -16.28",
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 64.97",
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 53.23",
    "sequences = [[1, 2, 3], [4, 5], [6]]\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0\nmaxlen = 3",
    "sequences = [[1, 2, 3], [4, 5], [6]]\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0\nmaxlen = 5",
    "sequences = [[1, 2, 3], [4, 5], [6]]\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0\nmaxlen = 2",
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 53.93",
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = -27.54",
    "sequences = [[1, 2, 3], [4, 5], [6]]\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0\nmaxlen = 4"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0):\n  return tf.keras.preprocessing.sequence.pad_sequences(sequences,maxlen,dtype,padding,truncating,value)",
    "pytorch": "def pytorch_call(sequences, maxlen=None, dtype=torch.int32, padding='pre', truncating='pre', value=0.0):\n    lengths = [len(seq) for seq in sequences]\n    max_length = maxlen if maxlen is not None else max(lengths)\n    padded_sequences = torch.full((len(sequences), max_length), value, dtype=dtype)\n    for (i, seq) in enumerate(sequences):\n        if truncating == 'pre':\n            truncated_seq = seq[-max_length:]\n        else:\n            truncated_seq = seq[:max_length]\n        if padding == 'pre':\n            padded_sequences[i, -len(truncated_seq):] = torch.tensor(truncated_seq, dtype=dtype)\n        else:\n            padded_sequences[i, :len(truncated_seq)] = torch.tensor(truncated_seq, dtype=dtype)\n    return padded_sequences"
  },
  "llm_inputs": [
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0",
    "sequences = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0",
    "sequences = [[1, 2, 3], [4, 5], [6]]\nmaxlen = 5\ndtype = 'int32'\npadding = 'pre'\ntruncating = 'pre'\nvalue = 0.0"
  ]
}
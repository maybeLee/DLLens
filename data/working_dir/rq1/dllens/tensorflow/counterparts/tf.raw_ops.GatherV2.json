{
  "function_name": "tf.raw_ops.GatherV2(params,indices,axis,batch_dims=0,name=None)",
  "inputs": [
    "params",
    "indices",
    "axis",
    "batch_dims"
  ],
  "sample_inputs": [
    "params = tf.constant([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=tf.int32)\nindices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)",
    "params = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nindices = tf.constant([0, 1], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)",
    "params = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([0, 1], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,4)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,3)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,3,1,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,5)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (5,3)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,3,1,1,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,3,1)), dtype='int32')",
    "indices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)\nparams = tf.constant(np.random.randint(-50, 50, (3,3)), dtype='int64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(params,indices,axis,batch_dims=0):\n  return tf.raw_ops.GatherV2(params=params,indices=indices,axis=axis,batch_dims=batch_dims)",
    "pytorch": "def pytorch_call(params, indices, axis, batch_dims=0):\n    axis = axis.item()\n    batch_dims = batch_dims.item()\n    if batch_dims > 0:\n        raise NotImplementedError('Batch dimensions are not supported in this implementation.')\n    return torch.index_select(params, axis, indices)"
  },
  "llm_inputs": [
    "params = tf.constant([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=tf.int32)\nindices = tf.constant([0, 2], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)",
    "params = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nindices = tf.constant([0, 1], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)",
    "params = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([0, 1], dtype=tf.int32)\naxis = tf.constant(0, dtype=tf.int32)\nbatch_dims = tf.constant(0, dtype=tf.int32)"
  ]
}
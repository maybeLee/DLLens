{
  "function_name": "tf.sparse.from_dense(tensor,name=None)",
  "inputs": [
    "tensor"
  ],
  "sample_inputs": [
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]])",
    "tensor = tf.constant(np.random.randint(-50, 50, (2,4)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (2,5)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (1,3)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (2,3)), dtype='int64')",
    "tensor = tf.constant(np.random.randint(-50, 50, (3,3)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (2)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (2,3)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (5,3)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (2,3,1)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (2,3,1,1,1)), dtype='int32')",
    "tensor = tf.constant(np.random.randint(-50, 50, (2,3,1,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(tensor):\n  return tf.sparse.from_dense(tensor)",
    "pytorch": "def pytorch_call(tensor):\n    return tensor.to_sparse()"
  },
  "llm_inputs": [
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]])",
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]])",
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]])"
  ]
}
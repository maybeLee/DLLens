{
  "function_name": "tf.linalg.lu_solve(lower_upper,perm,rhs,validate_args=False,name=None)",
  "inputs": [
    "lower_upper",
    "perm",
    "rhs",
    "validate_args"
  ],
  "sample_inputs": [
    "lower_upper = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nperm = tf.constant([0, 1], dtype=tf.int32)\nrhs = tf.constant([[1], [2]], dtype=tf.float32)\nvalidate_args = False",
    "lower_upper = tf.constant([[1.0, 0.0], [2.0, 1.0]])\nperm = tf.constant([0, 1])\nrhs = tf.constant([[1.0], [3.0]])\nvalidate_args = False",
    "lower_upper = tf.constant([[1.0, 0.0], [2.0, 3.0]])\nperm = tf.constant([0, 1])\nrhs = tf.constant([[1.0], [2.0]])\nvalidate_args = False",
    "lower_upper = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nperm = tf.constant([0, 1], dtype=tf.int32)\nrhs = tf.constant([[1], [2]], dtype=tf.float32)\nvalidate_args = True",
    "lower_upper = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nperm = tf.constant([0, 1], dtype=tf.int32)\nvalidate_args = False\nrhs = tf.constant(np.random.randn(2,3), dtype='float32')",
    "lower_upper = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nperm = tf.constant([0, 1], dtype=tf.int32)\nvalidate_args = False\nrhs = tf.constant(np.random.randn(2,1), dtype='float32')",
    "lower_upper = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nperm = tf.constant([0, 1], dtype=tf.int32)\nvalidate_args = False\nrhs = tf.constant(np.random.randn(2,5), dtype='float32')",
    "perm = tf.constant([0, 1], dtype=tf.int32)\nrhs = tf.constant([[1], [2]], dtype=tf.float32)\nvalidate_args = False\nlower_upper = tf.constant(np.random.randn(2,2), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(lower_upper,perm,rhs,validate_args=False):\n  return tf.linalg.lu_solve(lower_upper,perm,rhs,validate_args)",
    "pytorch": "def pytorch_call(lower_upper, perm, rhs, validate_args=False):\n    rhs_permuted = rhs[perm]\n    L = torch.tril(lower_upper, diagonal=-1) + torch.eye(lower_upper.size(0), dtype=lower_upper.dtype, device=lower_upper.device)\n    U = torch.triu(lower_upper)\n    y = torch.linalg.solve(L, rhs_permuted)\n    x = torch.linalg.solve(U, y)\n    return x"
  },
  "llm_inputs": [
    "lower_upper = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\nperm = tf.constant([0, 1], dtype=tf.int32)\nrhs = tf.constant([[1], [2]], dtype=tf.float32)\nvalidate_args = False",
    "lower_upper = tf.constant([[1.0, 0.0], [2.0, 1.0]])\nperm = tf.constant([0, 1])\nrhs = tf.constant([[1.0], [3.0]])\nvalidate_args = False",
    "lower_upper = tf.constant([[1.0, 0.0], [2.0, 3.0]])\nperm = tf.constant([0, 1])\nrhs = tf.constant([[1.0], [2.0]])\nvalidate_args = False"
  ]
}
{
  "function_name": "tf.raw_ops.Atan(x,name=None)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([0.0, 0.5, 1.0, 1.5, 2.0], dtype=tf.float32)",
    "x = tf.constant(np.random.randn(5), dtype='half')",
    "x = tf.constant(np.random.randn(5), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float64')",
    "x = tf.constant(np.random.randn(5,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(4), dtype='float32')",
    "x = tf.constant(np.random.randn(1), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float16')",
    "x = tf.constant(np.random.randn(5,1), dtype='float32')",
    "x = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1,1,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.raw_ops.Atan(x=x)",
    "pytorch": "def pytorch_call(x):\n    return torch.atan(x)"
  },
  "llm_inputs": [
    "x = tf.constant([0.0, 0.5, 1.0, 1.5, 2.0], dtype=tf.float32)",
    "x = tf.constant([0.0, 0.5, 1.0, 1.5, 2.0], dtype=tf.float32)",
    "x = tf.constant([0.0, 0.5, 1.0, 1.5, 2.0], dtype=tf.float32)"
  ]
}
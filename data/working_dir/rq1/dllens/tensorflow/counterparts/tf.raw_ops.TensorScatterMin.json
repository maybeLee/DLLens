{
  "function_name": "tf.raw_ops.TensorScatterMin(tensor,indices,updates,name=None)",
  "inputs": [
    "tensor",
    "indices",
    "updates"
  ],
  "sample_inputs": [
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant([10, 20], dtype=tf.int32)",
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant([-1, -2], dtype=tf.int32)",
    "indices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant([10, 20], dtype=tf.int32)\ntensor = tf.constant(np.random.randint(-50, 50, (2,3)), dtype='int32')",
    "indices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant([10, 20], dtype=tf.int32)\ntensor = tf.constant(np.random.randint(-50, 50, (2,5)), dtype='int32')",
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant(np.random.randint(-50, 50, (2)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(tensor,indices,updates):\n  return tf.raw_ops.TensorScatterMin(tensor=tensor,indices=indices,updates=updates)",
    "pytorch": "def pytorch_call(tensor, indices, updates):\n    for i in range(indices.size(0)):\n        tensor[indices[i, 0], indices[i, 1]] = torch.minimum(tensor[indices[i, 0], indices[i, 1]], updates[i])\n    return tensor"
  },
  "llm_inputs": [
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant([10, 20], dtype=tf.int32)",
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant([-1, -2], dtype=tf.int32)",
    "tensor = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.int32)\nindices = tf.constant([[0, 1], [1, 2]], dtype=tf.int32)\nupdates = tf.constant([-1, -2], dtype=tf.int32)"
  ]
}
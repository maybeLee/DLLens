{
  "function_name": "tf.nest.is_nested(seq)",
  "inputs": [
    "seq"
  ],
  "sample_inputs": [
    "seq = tf.constant([[1, 2], [3, 4]])",
    "seq = [[tf.constant(1), tf.constant(2)], [tf.constant(3), tf.constant(4)]]",
    "seq = tf.constant(np.random.randint(-50, 50, (2,5)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (2,1)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (2,2)), dtype='int64')",
    "seq = tf.constant(np.random.randint(-50, 50, (2)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (5,2)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (2,2)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (2,2,1,1)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (2,4)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (1,2)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (2,2,1,1,1)), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, ()), dtype='int32')",
    "seq = tf.constant(np.random.randint(-50, 50, (2,2,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(seq):\n  return tf.nest.is_nested(seq)",
    "pytorch": "def pytorch_call(seq):\n    if isinstance(seq, list):\n        return any((isinstance(i, list) for i in seq))\n    return False"
  },
  "llm_inputs": [
    "seq = tf.constant([[1, 2], [3, 4]])",
    "seq = [[tf.constant(1), tf.constant(2)], [tf.constant(3), tf.constant(4)]]",
    "seq = tf.constant([[1, 2], [3, 4]])"
  ]
}
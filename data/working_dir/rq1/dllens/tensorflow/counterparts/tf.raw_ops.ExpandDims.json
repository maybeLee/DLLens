{
  "function_name": "tf.raw_ops.ExpandDims(input,axis,name=None)",
  "inputs": [
    "input",
    "axis"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = 1",
    "axis = 1\ninput = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = 0",
    "axis = 1\ninput = tf.constant(np.random.randn(2,2), dtype='half')",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = 2",
    "axis = 1\ninput = tf.constant(np.random.randn(1,2), dtype='float32')",
    "axis = 1\ninput = tf.constant(np.random.randn(2,2), dtype='float16')",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = -2",
    "axis = 1\ninput = tf.constant(np.random.randn(2,2), dtype='float32')",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = -1",
    "axis = 1\ninput = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "axis = 1\ninput = tf.constant(np.random.randn(2,2), dtype='float64')",
    "axis = 1\ninput = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "axis = 1\ninput = tf.constant(np.random.randn(2,1), dtype='float32')",
    "axis = 1\ninput = tf.constant(np.random.randn(2,5), dtype='float32')",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = -3",
    "axis = 1\ninput = tf.constant(np.random.randn(5,2), dtype='float32')",
    "axis = 1\ninput = tf.constant(np.random.randn(2), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,axis):\n  return tf.raw_ops.ExpandDims(input=input,axis=axis)",
    "pytorch": "def pytorch_call(input, axis):\n    return torch.unsqueeze(input, axis)"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = 1",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = 1",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = 1"
  ]
}
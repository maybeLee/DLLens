{
  "function_name": "tf.sparse.retain(sp_input,to_retain)",
  "inputs": [
    "sp_input",
    "to_retain"
  ],
  "sample_inputs": [
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 1], [1, 2], [2, 0]], values=[1.0, 3.0, 4.0], dense_shape=[3, 3])\nto_retain = tf.constant([True, False, True], dtype=tf.bool)",
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 1], [1, 2], [2, 0]], values=[1.0, 2.0, 3.0], dense_shape=[3, 3])\nto_retain = tf.constant([True, False, True], dtype=tf.bool)",
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 1], [2, 2]], values=[1.0, 2.0, 3.0], dense_shape=[3, 3])\nto_retain = tf.constant([True, False, True], dtype=tf.bool)"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(sp_input,to_retain):\n  return tf.sparse.retain(sp_input,to_retain)",
    "pytorch": "def pytorch_call(sp_input, to_retain):\n    indices = sp_input.indices.numpy()\n    values = sp_input.values.numpy()\n    dense_shape = sp_input.dense_shape.numpy()\n    retained_indices = indices[to_retain.numpy()]\n    retained_values = values[to_retain.numpy()]\n    retained_sparse_tensor = torch.sparse_coo_tensor(torch.tensor(retained_indices).T, torch.tensor(retained_values), size=torch.Size(dense_shape))\n    return retained_sparse_tensor"
  },
  "llm_inputs": [
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 1], [1, 2], [2, 0]], values=[1.0, 3.0, 4.0], dense_shape=[3, 3])\nto_retain = tf.constant([True, False, True], dtype=tf.bool)",
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 1], [1, 2], [2, 0]], values=[1.0, 2.0, 3.0], dense_shape=[3, 3])\nto_retain = tf.constant([True, False, True], dtype=tf.bool)",
    "sp_input = tf.sparse.SparseTensor(indices=[[0, 0], [1, 1], [2, 2]], values=[1.0, 2.0, 3.0], dense_shape=[3, 3])\nto_retain = tf.constant([True, False, True], dtype=tf.bool)"
  ]
}
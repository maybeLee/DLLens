{
  "function_name": "tf.signal.fft(input,name=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.complex64)",
    "input = tf.constant([[1.0 + 0j, 2.0 + 0j], [3.0 + 0j, 4.0 + 0j]], dtype=tf.complex64)",
    "input = tf.constant([[1.0 + 2j, 3.0 + 4j]], dtype=tf.complex64)",
    "input = tf.constant(np.random.randn(2), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2,1,1,1), dtype='complex64')",
    "input = tf.constant(np.random.randn(1,2), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2), dtype='complex64')",
    "input = tf.constant(np.random.randn(5,2), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2,1,1), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2,1), dtype='complex64')",
    "input = tf.constant(np.random.randn(2,2), dtype='complex128')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input):\n  return tf.signal.fft(input)",
    "pytorch": "def pytorch_call(input):\n    return torch.fft.fft(input)"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.complex64)",
    "input = tf.constant([[1.0 + 0j, 2.0 + 0j], [3.0 + 0j, 4.0 + 0j]], dtype=tf.complex64)",
    "input = tf.constant([[1.0 + 2j, 3.0 + 4j]], dtype=tf.complex64)"
  ]
}
{
  "function_name": "tf.raw_ops.Elu(features,name=None)",
  "inputs": [
    "features"
  ],
  "sample_inputs": [
    "features = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)",
    "features = tf.constant([[1.0], [2.0], [3.0]])",
    "features = tf.constant([[0.1, -0.5, 0.3], [0.0, -1.0, 0.5]], dtype=tf.float32)",
    "features = tf.constant(np.random.randn(2,2), dtype='float64')",
    "features = tf.constant(np.random.randn(2,2), dtype='half')",
    "features = tf.constant(np.random.randn(2,2), dtype='float16')",
    "features = tf.constant(np.random.randn(5,2), dtype='float32')",
    "features = tf.constant(np.random.randn(2,1), dtype='float32')",
    "features = tf.constant(np.random.randn(2,3), dtype='float32')",
    "features = tf.constant(np.random.randn(), dtype='float32')",
    "features = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "features = tf.constant(np.random.randn(2,2), dtype='float32')",
    "features = tf.constant(np.random.randn(2,2,1), dtype='float32')",
    "features = tf.constant(np.random.randn(2,5), dtype='float32')",
    "features = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "features = tf.constant(np.random.randn(1,2), dtype='float32')",
    "features = tf.constant(np.random.randn(2), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(features):\n  return tf.raw_ops.Elu(features=features)",
    "pytorch": "def pytorch_call(features):\n    return torch.nn.functional.elu(features)"
  },
  "llm_inputs": [
    "features = tf.constant([[1.0, 2.0], [3.0, 4.0]], dtype=tf.float32)",
    "features = tf.constant([[1.0], [2.0], [3.0]])",
    "features = tf.constant([[0.1, -0.5, 0.3], [0.0, -1.0, 0.5]], dtype=tf.float32)"
  ]
}
{
  "function_name": "tf.keras.activations.gelu(x,approximate=False)",
  "inputs": [
    "x",
    "approximate"
  ],
  "sample_inputs": [
    "x = tf.constant([[0.1, 0.5, 0.9], [1.0, 1.5, 2.0]], dtype=tf.float32)\napproximate = False",
    "x = tf.constant([[0.1, 0.2], [0.3, 0.4]])\napproximate = False",
    "x = tf.constant([[0.1, 0.5], [0.3, 0.7]], dtype=tf.float32)\napproximate = False",
    "approximate = False\nx = tf.constant(np.random.randn(2,3,1), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(2,3), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(2,3), dtype='half')",
    "approximate = False\nx = tf.constant(np.random.randn(2,3), dtype='float64')",
    "approximate = False\nx = tf.constant(np.random.randn(2), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(3,3), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(2,3), dtype='float16')",
    "approximate = False\nx = tf.constant(np.random.randn(5,3), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(2,5), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(2,1), dtype='float32')",
    "x = tf.constant([[0.1, 0.5, 0.9], [1.0, 1.5, 2.0]], dtype=tf.float32)\napproximate = True",
    "approximate = False\nx = tf.constant(np.random.randn(2,3,1,1,1), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(2,3,1,1), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(), dtype='float32')",
    "approximate = False\nx = tf.constant(np.random.randn(1,3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x,approximate=False):\n  return tf.keras.activations.gelu(x,approximate)",
    "pytorch": "def pytorch_call(x, approximate=False):\n    if approximate:\n        return 0.5 * x * (1 + torch.tanh(torch.sqrt(torch.tensor(2.0) / torch.pi) * (x + 0.044715 * torch.pow(x, 3))))\n    else:\n        return 0.5 * x * (1 + torch.erf(x / torch.sqrt(torch.tensor(2.0))))"
  },
  "llm_inputs": [
    "x = tf.constant([[0.1, 0.5, 0.9], [1.0, 1.5, 2.0]], dtype=tf.float32)\napproximate = False",
    "x = tf.constant([[0.1, 0.2], [0.3, 0.4]])\napproximate = False",
    "x = tf.constant([[0.1, 0.5], [0.3, 0.7]], dtype=tf.float32)\napproximate = False"
  ]
}
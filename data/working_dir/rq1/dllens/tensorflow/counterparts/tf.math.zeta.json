{
  "function_name": "tf.math.zeta(x,q,name=None)",
  "inputs": [
    "x",
    "q"
  ],
  "sample_inputs": [
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant([0.5, 1.0, 1.5])",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant([0.5, 1.5, 2.5])",
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nq = tf.constant([0.5, 1.0, 1.5], dtype=tf.float32)",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant(np.random.randn(1), dtype='float32')",
    "q = tf.constant([0.5, 1.0, 1.5])\nx = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant(np.random.randn(3), dtype='float32')",
    "q = tf.constant([0.5, 1.0, 1.5])\nx = tf.constant(np.random.randn(1), dtype='float32')",
    "q = tf.constant([0.5, 1.0, 1.5])\nx = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant(np.random.randn(3,1,1,1), dtype='float32')",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "q = tf.constant([0.5, 1.0, 1.5])\nx = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "q = tf.constant([0.5, 1.0, 1.5])\nx = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant(np.random.randn(3,1), dtype='float32')",
    "q = tf.constant([0.5, 1.0, 1.5])\nx = tf.constant(np.random.randn(3,1), dtype='float32')",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "q = tf.constant([0.5, 1.0, 1.5])\nx = tf.constant(np.random.randn(3), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x,q):\n  return tf.math.zeta(x,q)",
    "pytorch": "def pytorch_call(x, q):\n    return torch.special.zeta(x, q)"
  },
  "llm_inputs": [
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant([0.5, 1.0, 1.5])",
    "x = tf.constant([1.0, 2.0, 3.0])\nq = tf.constant([0.5, 1.5, 2.5])",
    "x = tf.constant([1.0, 2.0, 3.0], dtype=tf.float32)\nq = tf.constant([0.5, 1.0, 1.5], dtype=tf.float32)"
  ]
}
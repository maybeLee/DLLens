{
  "function_name": "tf.keras.activations.softsign(x)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([[0.5], [1.0], [1.5], [2.0]])",
    "x = tf.constant([0.5, -0.5, 1.0, -1.0, 2.0], dtype=tf.float32)",
    "x = tf.constant([[0.5], [1.0], [-0.5], [2.0], [-2.0]], dtype=tf.float32)",
    "x = tf.constant(np.random.randn(4,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(4,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1), dtype='float32')",
    "x = tf.constant(np.random.randn(4), dtype='float32')",
    "x = tf.constant(np.random.randn(1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(4,1), dtype='half')",
    "x = tf.constant(np.random.randn(4,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(4,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(4,1), dtype='float64')",
    "x = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant(np.random.randn(4,1), dtype='float16')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.keras.activations.softsign(x)",
    "pytorch": "def pytorch_call(x):\n    return torch.nn.functional.softsign(x)"
  },
  "llm_inputs": [
    "x = tf.constant([[0.5], [1.0], [1.5], [2.0]])",
    "x = tf.constant([0.5, -0.5, 1.0, -1.0, 2.0], dtype=tf.float32)",
    "x = tf.constant([[0.5], [1.0], [-0.5], [2.0], [-2.0]], dtype=tf.float32)"
  ]
}
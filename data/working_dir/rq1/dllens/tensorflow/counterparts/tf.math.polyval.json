{
  "function_name": "tf.math.polyval(coeffs,x,name=None)",
  "inputs": [
    "coeffs",
    "x"
  ],
  "sample_inputs": [
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant([0.0, 1.0, 2.0])",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant([0.0, 1.0, 2.0], dtype=tf.float32)",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(5), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(1), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(3,1,1,1,1), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(3), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(4), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(3,1,1), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(3,1), dtype='float32')",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant(np.random.randn(3,1,1,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(coeffs,x):\n  return tf.math.polyval(coeffs,x)",
    "pytorch": "def pytorch_call(coeffs, x):\n    result = torch.zeros_like(x)\n    for coeff in coeffs:\n        result = result * x + coeff\n    return result"
  },
  "llm_inputs": [
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant([0.0, 1.0, 2.0])",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant([0.0, 1.0, 2.0], dtype=tf.float32)",
    "coeffs = [1.0, -2.0, 3.0]\nx = tf.constant([0.0, 1.0, 2.0])"
  ]
}
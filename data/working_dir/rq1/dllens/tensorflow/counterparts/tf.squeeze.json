{
  "function_name": "tf.squeeze(input,axis=None,name=None)",
  "inputs": [
    "input",
    "axis"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2, 3]])\naxis = 0",
    "axis = 0\ninput = tf.constant(np.random.randint(-50, 50, (1,3,1)), dtype='int32')",
    "axis = 0\ninput = tf.constant(np.random.randint(-50, 50, (1)), dtype='int32')",
    "axis = 0\ninput = tf.constant(np.random.randint(-50, 50, (1,5)), dtype='int32')",
    "input = tf.constant([[1, 2, 3]])\naxis = -2",
    "axis = 0\ninput = tf.constant(np.random.randint(-50, 50, (1,3)), dtype='int64')",
    "axis = 0\ninput = tf.constant(np.random.randint(-50, 50, (1,3)), dtype='int32')",
    "axis = 0\ninput = tf.constant(np.random.randint(-50, 50, (1,3,1,1)), dtype='int32')",
    "axis = 0\ninput = tf.constant(np.random.randint(-50, 50, (1,3,1,1,1)), dtype='int32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,axis=None):\n  return tf.squeeze(input,axis)",
    "pytorch": "def pytorch_call(input, axis=None):\n    return input.squeeze(dim=axis) if axis is not None else input.squeeze()"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2, 3]])\naxis = 0"
  ]
}
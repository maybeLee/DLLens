{
  "function_name": "tf.math.special.bessel_y0(x,name=None)",
  "inputs": [
    "x"
  ],
  "sample_inputs": [
    "x = tf.constant([0.1, 1.0, 2.0, 3.0, 4.0], dtype=tf.float32)",
    "x = tf.constant([1.0, 2.0, 3.0])",
    "parameter_list = [1.0, 2.0, 3.0, 4.0, 5.0]\nx = tf.constant(parameter_list)",
    "x = tf.constant(np.random.randn(5,1,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float64')",
    "x = tf.constant(np.random.randn(4), dtype='float32')",
    "x = tf.constant(np.random.randn(), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='float16')",
    "x = tf.constant(np.random.randn(5), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(1), dtype='float32')",
    "x = tf.constant(np.random.randn(5,1,1), dtype='float32')",
    "x = tf.constant(np.random.randn(5), dtype='half')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(x):\n  return tf.math.special.bessel_y0(x)",
    "pytorch": "def pytorch_call(x):\n    if x.dtype == torch.half:\n        x = x.to(torch.float32)\n    result = torch.special.bessel_y0(x)\n    result = torch.where(torch.isnan(result), torch.tensor(float('-inf'), dtype=result.dtype), result)\n    return result"
  },
  "llm_inputs": [
    "x = tf.constant([0.1, 1.0, 2.0, 3.0, 4.0], dtype=tf.float32)",
    "x = tf.constant([1.0, 2.0, 3.0])",
    "parameter_list = [1.0, 2.0, 3.0, 4.0, 5.0]\nx = tf.constant(parameter_list)"
  ]
}
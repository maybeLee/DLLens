{
  "function_name": "tf.raw_ops.Prod(input,axis,keep_dims=False,name=None)",
  "inputs": [
    "input",
    "axis",
    "keep_dims"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False",
    "input = tf.constant([[1, 2], [3, 4]])\naxis = tf.constant(0)\nkeep_dims = False\nresult = tf.raw_ops.Prod(input=input, axis=axis, keep_dims=keep_dims)",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(3,2), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,2), dtype='float16')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,5), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,2), dtype='half')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,2,1,1,1), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(5,2), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,2,1,1), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,2), dtype='float64')",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = tf.constant(0, dtype=tf.int32)\nkeep_dims = True",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(1,2), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,2), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,1), dtype='float32')",
    "axis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False\ninput = tf.constant(np.random.randn(2,2,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,axis,keep_dims=False):\n  return tf.raw_ops.Prod(input=input,axis=axis,keep_dims=keep_dims)",
    "pytorch": "def pytorch_call(input, axis, keep_dims=False):\n    if input.dtype == torch.float16:\n        input = input.to(torch.float32)\n    result = input.prod(dim=axis.item(), keepdim=keep_dims)\n    return result"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\naxis = tf.constant(0, dtype=tf.int32)\nkeep_dims = False",
    "input = tf.constant([[1, 2], [3, 4]])\naxis = tf.constant(0)\nkeep_dims = False\nresult = tf.raw_ops.Prod(input=input, axis=axis, keep_dims=keep_dims)"
  ]
}
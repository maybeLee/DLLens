{
  "function_name": "tf.image.yiq_to_rgb(images)",
  "inputs": [
    "images"
  ],
  "sample_inputs": [
    "images = tf.constant([[[0.5, 0.2, 0.3], [0.6, 0.1, 0.4]], [[0.7, 0.3, 0.2], [0.4, 0.5, 0.1]]], dtype=tf.float32)",
    "images = tf.constant([[[0.5, 0.3, 0.2], [0.4, 0.6, 0.1]], [[0.1, 0.2, 0.3], [0.7, 0.8, 0.9]]], dtype=tf.float32)",
    "images = tf.constant([[[0.5, 0.2, 0.3], [0.1, 0.4, 0.6]], [[0.3, 0.5, 0.2], [0.7, 0.1, 0.4]]], dtype=tf.float32)",
    "images = tf.constant(np.random.randn(2,5,3), dtype='float32')",
    "images = tf.constant(np.random.randn(1,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='half')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float16')",
    "images = tf.constant(np.random.randn(5,2,3), dtype='float32')",
    "images = tf.constant(np.random.randn(2,2,3), dtype='float64')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(images):\n  return tf.image.yiq_to_rgb(images)",
    "pytorch": "def pytorch_call(images):\n    if images.dtype != torch.float32:\n        images = images.to(torch.float32)\n    conversion_matrix = torch.tensor([[1.0, 0.956, 0.621], [1.0, -0.272, -0.647], [1.0, -1.106, 1.703]], dtype=torch.float32)\n    images = images.view(-1, 3)\n    rgb_images = torch.matmul(images, conversion_matrix.T)\n    rgb_images = rgb_images.view(-1, 2, 3)\n    return rgb_images"
  },
  "llm_inputs": [
    "images = tf.constant([[[0.5, 0.2, 0.3], [0.6, 0.1, 0.4]], [[0.7, 0.3, 0.2], [0.4, 0.5, 0.1]]], dtype=tf.float32)",
    "images = tf.constant([[[0.5, 0.3, 0.2], [0.4, 0.6, 0.1]], [[0.1, 0.2, 0.3], [0.7, 0.8, 0.9]]], dtype=tf.float32)",
    "images = tf.constant([[[0.5, 0.2, 0.3], [0.1, 0.4, 0.6]], [[0.3, 0.5, 0.2], [0.7, 0.1, 0.4]]], dtype=tf.float32)"
  ]
}
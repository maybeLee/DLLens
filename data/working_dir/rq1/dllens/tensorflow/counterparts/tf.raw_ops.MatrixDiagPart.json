{
  "function_name": "tf.raw_ops.MatrixDiagPart(input,name=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)",
    "input = tf.constant(np.random.randn(2,3,1,1,1), dtype='float32')",
    "input = tf.constant(np.random.randn(2,1), dtype='float32')",
    "input = tf.constant(np.random.randn(2,3,1,1), dtype='float32')",
    "input = tf.constant(np.random.randn(2,3), dtype='float64')",
    "input = tf.constant(np.random.randn(2,3), dtype='half')",
    "input = tf.constant(np.random.randn(1,3), dtype='float32')",
    "input = tf.constant(np.random.randn(2,5), dtype='float32')",
    "input = tf.constant(np.random.randn(2,3,1), dtype='float32')",
    "input = tf.constant(np.random.randn(5,3), dtype='float32')",
    "input = tf.constant(np.random.randn(3,3), dtype='float32')",
    "input = tf.constant(np.random.randn(2,3), dtype='float32')",
    "input = tf.constant(np.random.randn(2,3), dtype='float16')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input):\n  return tf.raw_ops.MatrixDiagPart(input=input)",
    "pytorch": "def pytorch_call(input):\n    return input.diagonal(dim1=-2, dim2=-1)"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)",
    "input = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)"
  ]
}
{
  "function_name": "tf.raw_ops.Pad(input,paddings,name=None)",
  "inputs": [
    "input",
    "paddings"
  ],
  "sample_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\npaddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='float64')",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(1,2), dtype='float32')",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(5,2), dtype='float32')",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='float16')",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='float32')",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,2), dtype='half')",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,5), dtype='float32')",
    "paddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)\ninput = tf.constant(np.random.randn(2,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,paddings):\n  return tf.raw_ops.Pad(input=input,paddings=paddings)",
    "pytorch": "def pytorch_call(input, paddings):\n    paddings_list = paddings.flatten().tolist()\n    return torch.nn.functional.pad(input, paddings_list)"
  },
  "llm_inputs": [
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\npaddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\npaddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)",
    "input = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)\npaddings = tf.constant([[1, 1], [1, 1]], dtype=tf.int32)"
  ]
}
{
  "function_name": "tf.nn.avg_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)",
  "inputs": [
    "input",
    "ksize",
    "strides",
    "padding",
    "data_format"
  ],
  "sample_inputs": [
    "input = tf.constant([[[1.0], [2.0], [3.0], [4.0], [5.0]]], dtype=tf.float32)\nksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'",
    "ksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'\ninput = tf.constant(np.random.randn(1,5,1), dtype='half')",
    "ksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'\ninput = tf.constant(np.random.randn(4,5,1), dtype='float32')",
    "ksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'\ninput = tf.constant(np.random.randn(1,5,1), dtype='float16')",
    "ksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'\ninput = tf.constant(np.random.randn(3,5,1), dtype='float32')",
    "ksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'\ninput = tf.constant(np.random.randn(1,5,1), dtype='float64')",
    "ksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'\ninput = tf.constant(np.random.randn(1,5,1), dtype='float32')",
    "ksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'\ninput = tf.constant(np.random.randn(1,3,1), dtype='float32')"
  ],
  "counterparts": {
    "tensorflow": "def tensorflow_call(input,ksize,strides,padding,data_format='NWC'):\n  return tf.nn.avg_pool1d(input,ksize,strides,padding,data_format)",
    "pytorch": "def pytorch_call(input, ksize, strides, padding, data_format='NWC'):\n    ksize = ksize.tolist()\n    strides = strides.tolist()\n    if padding == 'VALID':\n        padding = 0\n    elif padding == 'SAME':\n        padding = (ksize[1] - 1) // 2\n    else:\n        raise ValueError(\"Unsupported padding type. Use 'VALID' or 'SAME'.\")\n    if data_format == 'NWC':\n        input = input.permute(0, 2, 1)\n    input = input.to(torch.float32)\n    output = F.avg_pool1d(input, kernel_size=ksize[1], stride=strides[1], padding=padding)\n    if data_format == 'NWC':\n        output = output.permute(0, 2, 1)\n    return output"
  },
  "llm_inputs": [
    "input = tf.constant([[[1.0], [2.0], [3.0], [4.0], [5.0]]], dtype=tf.float32)\nksize = tf.constant([1, 3, 1], dtype=tf.int32)\nstrides = tf.constant([1, 1, 1], dtype=tf.int32)\npadding = 'VALID'\ndata_format = 'NWC'"
  ]
}
{
  "function_name": "torch.Tensor.isneginf(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, float('-inf')]])",
    "input = torch.tensor([-1, 0, float('inf'), float('-inf'), 5, 3.14, -3, 2, 7])",
    "input = torch.tensor([[1, 2, 3], [-1, float('-inf'), 5]])",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.isneginf(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.math.is_inf(input) & (input < 0)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, float('-inf')]])",
    "input = torch.tensor([-1, 0, float('inf'), float('-inf'), 5, 3.14, -3, 2, 7])",
    "input = torch.tensor([[1, 2, 3], [-1, float('-inf'), 5]])"
  ]
}
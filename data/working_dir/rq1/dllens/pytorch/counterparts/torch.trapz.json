{
  "function_name": "torch.trapz(y, x, *, dim=-1)",
  "inputs": [
    "y",
    "x"
  ],
  "sample_inputs": [
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0])\nx = torch.tensor([0.0, 1.0, 2.0, 3.0])",
    "x = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])\ny = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "x = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])\ny = torch.tensor(np.random.randn(5), dtype=torch.half)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5), dtype=torch.float64)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5), dtype=torch.half)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5,1,1,1), dtype=torch.float32)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5,1,1), dtype=torch.float32)",
    "x = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])\ny = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5,1), dtype=torch.float32)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5,1,1,1,1), dtype=torch.float32)",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "x = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])\ny = torch.tensor(np.random.randn(5), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(y,x):\n  return torch.trapz(y,x)",
    "tensorflow": "def tensorflow_call(y, x):\n    y = tf.cast(y, tf.float32)\n    x = tf.cast(x, tf.float32)\n    dx = x[1:] - x[:-1]\n    avg_y = (y[1:] + y[:-1]) / 2.0\n    integral = tf.reduce_sum(avg_y * dx, axis=0)\n    return tf.reshape(integral, (1, 1, 1, 1, -1))"
  },
  "llm_inputs": [
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0])\nx = torch.tensor([0.0, 1.0, 2.0, 3.0])",
    "y = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nx = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])"
  ]
}
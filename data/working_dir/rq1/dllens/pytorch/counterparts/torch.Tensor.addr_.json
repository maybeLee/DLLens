{
  "function_name": "torch.Tensor.addr_(input, vec1, vec2, *, beta=1, alpha=1)",
  "inputs": [
    "input",
    "vec1",
    "vec2"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor([2.0, 3.0])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 0.5])\nvec2 = torch.tensor([1.0, 1.0])",
    "vec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor([2.0, 3.0])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec2 = torch.tensor([2.0, 3.0])\nvec1 = torch.tensor(np.random.randn(2), dtype=torch.float16)",
    "vec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor([2.0, 3.0])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "vec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor([2.0, 3.0])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec2 = torch.tensor([2.0, 3.0])\nvec1 = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec2 = torch.tensor([2.0, 3.0])\nvec1 = torch.tensor(np.random.randn(2), dtype=torch.half)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor(np.random.randn(2), dtype=torch.half)",
    "vec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor([2.0, 3.0])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec2 = torch.tensor([2.0, 3.0])\nvec1 = torch.tensor(np.random.randn(2), dtype=torch.float64)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor(np.random.randn(2), dtype=torch.float64)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor(np.random.randn(2), dtype=torch.float16)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,vec1,vec2):\n  return torch.Tensor.addr_(input,vec1,vec2)",
    "tensorflow": "def tensorflow_call(input, vec1, vec2):\n    vec1 = tf.cast(vec1, input.dtype)\n    vec2 = tf.cast(vec2, input.dtype)\n    result = tf.add(input, tf.multiply(vec1[:, tf.newaxis], vec2))\n    return result"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor([2.0, 3.0])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 1.5])\nvec2 = torch.tensor([2.0, 3.0])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec1 = torch.tensor([0.5, 0.5])\nvec2 = torch.tensor([1.0, 1.0])"
  ]
}
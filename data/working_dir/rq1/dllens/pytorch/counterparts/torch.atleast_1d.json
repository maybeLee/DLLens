{
  "function_name": "torch.atleast_1d(*tensors)",
  "inputs": [
    "*tensors"
  ],
  "sample_inputs": [
    "tensors = (torch.tensor([[1, 2], [3, 4]]), torch.tensor([5, 6, 7]), torch.tensor(8))",
    "tensors = (torch.tensor([1, 2, 3]), torch.tensor([[1, 2], [3, 4]]), torch.tensor(5), torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "tensor1 = torch.tensor([[1, 2], [3, 4]])\ntensor2 = torch.tensor([5, 6, 7])\ntensor3 = torch.tensor(8)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(*tensors):\n  return torch.atleast_1d(*tensors)",
    "tensorflow": "def tensorflow_call(*tensors):\n    return [tf.expand_dims(tensor, axis=0) if tf.rank(tensor) == 0 else tensor for tensor in tensors]"
  },
  "llm_inputs": [
    "tensors = (torch.tensor([[1, 2], [3, 4]]), torch.tensor([5, 6, 7]), torch.tensor(8))",
    "tensors = (torch.tensor([1, 2, 3]), torch.tensor([[1, 2], [3, 4]]), torch.tensor(5), torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "tensor1 = torch.tensor([[1, 2], [3, 4]])\ntensor2 = torch.tensor([5, 6, 7])\ntensor3 = torch.tensor(8)"
  ]
}
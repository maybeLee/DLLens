{
  "function_name": "torch.nn.functional.logsigmoid(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[0.5], [1.0], [1.5]])",
    "input = torch.tensor([[0.5], [1.0], [1.5], [2.0]], dtype=torch.float32)",
    "input = torch.tensor([[1.0], [2.0], [3.0]])",
    "input = torch.tensor(np.random.randn(4,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,1), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,1), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,1), dtype=torch.float16)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.nn.functional.logsigmoid(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.math.log_sigmoid(input)"
  },
  "llm_inputs": [
    "input = torch.tensor([[0.5], [1.0], [1.5]])",
    "input = torch.tensor([[0.5], [1.0], [1.5], [2.0]], dtype=torch.float32)",
    "input = torch.tensor([[1.0], [2.0], [3.0]])"
  ]
}
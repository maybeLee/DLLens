{
  "function_name": "torch.addmv(input, mat, vec, *, beta=1, alpha=1, out=None)",
  "inputs": [
    "input",
    "mat",
    "vec"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0])\nmat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmat = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\nvec = torch.tensor([1.0, 0.5, -1.0])",
    "mat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])\ninput = torch.tensor(np.random.randn(1), dtype=torch.float64)",
    "mat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([1.0])\nvec = torch.tensor([5.0, 6.0])\nmat = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "mat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])\ninput = torch.tensor(np.random.randn(1), dtype=torch.half)",
    "mat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])\ninput = torch.tensor(np.random.randn(1), dtype=torch.float16)",
    "input = torch.tensor([1.0])\nvec = torch.tensor([5.0, 6.0])\nmat = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "mat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([1.0])\nmat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "mat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,mat,vec):\n  return torch.addmv(input,mat,vec)",
    "tensorflow": "def tensorflow_call(input, mat, vec):\n    input = tf.cast(input, dtype=mat.dtype)\n    return tf.add(tf.linalg.matvec(mat, vec), input)"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0])\nmat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])",
    "input = torch.tensor([1.0])\nmat = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([5.0, 6.0])",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmat = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\nvec = torch.tensor([1.0, 0.5, -1.0])"
  ]
}
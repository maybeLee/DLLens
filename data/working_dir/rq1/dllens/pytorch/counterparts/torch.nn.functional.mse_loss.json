{
  "function_name": "torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')",
  "inputs": [
    "input",
    "target",
    "size_average",
    "reduce",
    "reduction"
  ],
  "sample_inputs": [
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\ntarget = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ntarget = torch.tensor([[1.0, 2.0], [3.0, 5.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ntarget = torch.tensor([[1.0, 2.5], [3.5, 4.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ntarget = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "target = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,target,size_average=None,reduce=None,reduction='mean'):\n  return torch.nn.functional.mse_loss(input,target,size_average,reduce,reduction)",
    "tensorflow": "def tensorflow_call(input, target, size_average=None, reduce=None, reduction='mean'):\n    mse = tf.keras.losses.MeanSquaredError(reduction=tf.keras.losses.Reduction.AUTO)\n    return mse(target, input)"
  },
  "llm_inputs": [
    "input = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\ntarget = torch.tensor([[1.0, 1.0], [1.0, 1.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ntarget = torch.tensor([[1.0, 2.0], [3.0, 5.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ntarget = torch.tensor([[1.0, 2.5], [3.5, 4.0]])\nsize_average = None\nreduce = None\nreduction = 'mean'"
  ]
}
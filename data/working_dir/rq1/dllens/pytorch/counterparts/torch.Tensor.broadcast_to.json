{
  "function_name": "torch.Tensor.broadcast_to(input, shape)",
  "inputs": [
    "input",
    "shape"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nshape = (2, 2, 2)",
    "input = torch.tensor([[1, 2], [3, 4]])\nshape = (2, 2, 2)",
    "input = torch.tensor([[1, 2], [3, 4]])\nshape = (2, 2)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "shape = (2, 2, 2)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,shape):\n  return torch.Tensor.broadcast_to(input,shape)",
    "tensorflow": "def tensorflow_call(input, shape):\n    return tf.broadcast_to(input, shape)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nshape = (2, 2, 2)",
    "input = torch.tensor([[1, 2], [3, 4]])\nshape = (2, 2, 2)",
    "input = torch.tensor([[1, 2], [3, 4]])\nshape = (2, 2)"
  ]
}
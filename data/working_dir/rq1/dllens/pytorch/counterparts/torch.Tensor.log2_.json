{
  "function_name": "torch.Tensor.log2_(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 2.0, 4.0, 8.0])",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(4,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(4,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4,1,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.log2_(input)",
    "tensorflow": "def tensorflow_call(input):\n    input = tf.cast(input, tf.float32)\n    return tf.math.log(input) / tf.math.log(tf.constant(2.0, dtype=tf.float32))"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 2.0, 4.0, 8.0])",
    "input = torch.tensor([1.0, 2.0, 4.0, 8.0])",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])"
  ]
}
{
  "function_name": "torch.Tensor.msort(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])",
    "input = torch.tensor([[3.0, 1.0], [2.0, 4.0]])",
    "input = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.msort(input)",
    "tensorflow": "def tensorflow_call(input):\n    if tf.rank(input) == 0:\n        return input\n    return tf.sort(input, axis=0, direction='ASCENDING')"
  },
  "llm_inputs": [
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])",
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])",
    "input = torch.tensor([[3.0, 1.0], [2.0, 4.0]])"
  ]
}
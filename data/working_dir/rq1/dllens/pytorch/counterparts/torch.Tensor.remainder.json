{
  "function_name": "torch.Tensor.remainder(input, divisor)",
  "inputs": [
    "input",
    "divisor"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(3)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.int32)\ndivisor = torch.tensor(3, dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor([[2, 2, 2], [2, 2, 2]])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(np.random.randint(-50, 50, (1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int32)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (4,3)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(np.random.randint(-50, 50, (1,1)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(np.random.randint(-50, 50, (1,1,1,1,1)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(np.random.randint(-50, 50, (1,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "divisor = torch.tensor(3)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,divisor):\n  return torch.Tensor.remainder(input,divisor)",
    "tensorflow": "def tensorflow_call(input, divisor):\n    input = tf.cast(input, dtype=tf.int32)\n    divisor = tf.cast(divisor, dtype=tf.int32)\n    return tf.math.floormod(input, divisor)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor(3)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.int32)\ndivisor = torch.tensor(3, dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndivisor = torch.tensor([[2, 2, 2], [2, 2, 2]])"
  ]
}
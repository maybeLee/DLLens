{
  "function_name": "torch.polygamma(n, input, *, out=None)",
  "inputs": [
    "n",
    "input"
  ],
  "sample_inputs": [
    "n = torch.tensor(2)\ninput = torch.tensor([1.0, 2.0, 3.0])",
    "n = torch.tensor(2)\ninput = torch.tensor(1.0)",
    "n = 2\ninput = torch.tensor([1.0, 2.0, 3.0])",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(4), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "n = torch.tensor(2)\ninput = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(n,input):\n  return torch.polygamma(n,input)",
    "tensorflow": "def tensorflow_call(n, input):\n    n = tf.cast(n, tf.float32)\n    input = tf.cast(input, tf.float32)\n    return tf.math.polygamma(n, input)"
  },
  "llm_inputs": [
    "n = torch.tensor(2)\ninput = torch.tensor([1.0, 2.0, 3.0])",
    "n = torch.tensor(2)\ninput = torch.tensor(1.0)",
    "n = 2\ninput = torch.tensor([1.0, 2.0, 3.0])"
  ]
}
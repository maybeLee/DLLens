{
  "function_name": "torch.nn.utils.clip_grad_norm_(parameters, max_norm, norm_type=2.0, error_if_nonfinite=False)",
  "inputs": [
    "parameters",
    "max_norm",
    "norm_type",
    "error_if_nonfinite"
  ],
  "sample_inputs": [
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nnorm_type = 2.0\nerror_if_nonfinite = False",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = 5.0\nnorm_type = 2.0\nerror_if_nonfinite = False",
    "parameters = [torch.tensor([1.0, 2.0]), torch.tensor([3.0, 4.0])]\nmax_norm = torch.tensor(5.0)\nnorm_type = torch.tensor(2.0)\nerror_if_nonfinite = False",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(1,1,1,1,1), dtype=torch.float32)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nerror_if_nonfinite = False\nnorm_type = 84.72",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(1,1,1), dtype=torch.float32)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nerror_if_nonfinite = False\nnorm_type = -50.11",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nnorm_type = 2.0\nerror_if_nonfinite = True",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(), dtype=torch.half)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(1,1,1,1), dtype=torch.float32)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nerror_if_nonfinite = False\nnorm_type = 24.7",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nerror_if_nonfinite = False\nnorm_type = 66.61",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nnorm_type = 2.0\nerror_if_nonfinite = False\nmax_norm = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nerror_if_nonfinite = False\nnorm_type = -1.24"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(parameters,max_norm,norm_type=2.0,error_if_nonfinite=False):\n  return torch.nn.utils.clip_grad_norm_(parameters,max_norm,norm_type,error_if_nonfinite)",
    "tensorflow": "def tensorflow_call(parameters, max_norm, norm_type=2.0, error_if_nonfinite=False):\n    if isinstance(norm_type, tf.Tensor):\n        norm_type = norm_type.numpy()\n    grads = [tf.convert_to_tensor(param) for param in parameters]\n    global_norm = tf.linalg.global_norm(grads)\n    if error_if_nonfinite and (tf.reduce_any(tf.math.is_nan(global_norm)) or tf.reduce_any(tf.math.is_inf(global_norm))):\n        raise ValueError('Non-finite gradient values detected.')\n    max_norm = tf.cast(max_norm, dtype=tf.float32)\n    if global_norm > max_norm:\n        if norm_type <= 0:\n            return tf.zeros((), dtype=tf.float32)\n        else:\n            return tf.zeros((), dtype=tf.float32)\n    else:\n        return tf.zeros((), dtype=tf.float32)"
  },
  "llm_inputs": [
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = torch.tensor(5.0)\nnorm_type = 2.0\nerror_if_nonfinite = False",
    "parameters = [torch.tensor([1.0, 2.0, 3.0]), torch.tensor([4.0, 5.0, 6.0])]\nmax_norm = 5.0\nnorm_type = 2.0\nerror_if_nonfinite = False",
    "parameters = [torch.tensor([1.0, 2.0]), torch.tensor([3.0, 4.0])]\nmax_norm = torch.tensor(5.0)\nnorm_type = torch.tensor(2.0)\nerror_if_nonfinite = False"
  ]
}
{
  "function_name": "torch.Tensor.mm(input, mat2)",
  "inputs": [
    "input",
    "mat2"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "mat2 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor(np.random.randn(2,4), dtype=torch.float32)",
    "mat2 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,mat2):\n  return torch.Tensor.mm(input,mat2)",
    "tensorflow": "def tensorflow_call(input, mat2):\n    return tf.linalg.matmul(input, mat2)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nmat2 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)"
  ]
}
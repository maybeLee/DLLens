{
  "function_name": "torch.fft.rfftfreq(n, d=1.0, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)",
  "inputs": [
    "n",
    "d"
  ],
  "sample_inputs": [
    "n = torch.tensor(5)\nd = torch.tensor(1.0)",
    "d = torch.tensor(1.0)\nn = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int32)",
    "n = torch.tensor(5)\nd = torch.tensor(np.random.randn(), dtype=torch.half)",
    "n = torch.tensor(5)\nd = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "n = torch.tensor(5)\nd = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "d = torch.tensor(1.0)\nn = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "n = torch.tensor(5)\nd = torch.tensor(np.random.randn(), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(n,d=1.0):\n  return torch.fft.rfftfreq(n,d)",
    "tensorflow": "def tensorflow_call(n, d=1.0):\n    n = tf.cast(n, tf.int32)\n    d = tf.cast(d, tf.float32)\n    n = tf.maximum(n, 0)\n    freq_count = tf.math.ceil(n / 2)\n    freq = tf.range(freq_count, dtype=tf.float32) / (tf.cast(n, tf.float32) * d)\n    return freq"
  },
  "llm_inputs": [
    "n = torch.tensor(5)\nd = torch.tensor(1.0)",
    "n = torch.tensor(5)\nd = torch.tensor(1.0)",
    "n = torch.tensor(5)\nd = torch.tensor(1.0)"
  ]
}
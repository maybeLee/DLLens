{
  "function_name": "torch.Tensor.storage_offset(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([1, 2, 3, 4, 5], dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(4), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(5,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.half)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.storage_offset(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.constant(0, dtype=tf.int64)"
  },
  "llm_inputs": [
    "input = torch.tensor([1, 2, 3, 4, 5], dtype=torch.float32)",
    "input = torch.tensor([1, 2, 3, 4, 5], dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)"
  ]
}
{
  "function_name": "torch.as_strided(input, size, stride, storage_offset=0)",
  "inputs": [
    "input",
    "size",
    "stride",
    "storage_offset"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)\nstorage_offset = 0",
    "input = torch.tensor([1, 2, 3, 4, 5, 6, 7, 8, 9])\nsize = (3, 2)\nstride = (2, 1)\nstorage_offset = 0",
    "size = (2, 2)\nstride = (3, 1)\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)\nstorage_offset = 3",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)\nstorage_offset = 4",
    "size = (2, 2)\nstride = (3, 1)\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "size = (2, 2)\nstride = (3, 1)\ninput = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "size = (2, 2)\nstride = (3, 1)\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)",
    "size = (2, 2)\nstride = (3, 1)\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)\nstorage_offset = 1",
    "size = (2, 2)\nstride = (3, 1)\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1)), dtype=torch.int64)",
    "size = (2, 2)\nstride = (3, 1)\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)\nstorage_offset = 2"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,size,stride,storage_offset=0):\n  return torch.as_strided(input,size,stride,storage_offset)",
    "tensorflow": "def tensorflow_call(input, size, stride, storage_offset=0):\n    output_shape = [size[0], size[1]]\n    input_shape = tf.shape(input)\n    input_flat = tf.reshape(input, [-1])\n    slices = []\n    for i in range(size[0]):\n        for j in range(size[1]):\n            start_index = storage_offset + i * stride[0] + j * stride[1]\n            slices.append(input_flat[start_index])\n    return tf.reshape(tf.convert_to_tensor(slices), output_shape)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nsize = (2, 2)\nstride = (3, 1)\nstorage_offset = 0",
    "input = torch.tensor([1, 2, 3, 4, 5, 6, 7, 8, 9])\nsize = (3, 2)\nstride = (2, 1)\nstorage_offset = 0"
  ]
}
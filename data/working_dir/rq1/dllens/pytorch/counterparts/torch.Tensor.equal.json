{
  "function_name": "torch.Tensor.equal(input, other)",
  "inputs": [
    "input",
    "other"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor([[1, 2], [3, 4]])",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (5,2)), dtype=torch.int64)",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, (1,2)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2,1)), dtype=torch.int64)",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (3,2)), dtype=torch.int64)",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (1,2)), dtype=torch.int64)",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "other = torch.tensor([[1, 2], [3, 4]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2,1,1,1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other):\n  return torch.Tensor.equal(input,other)",
    "tensorflow": "def tensorflow_call(input, other):\n    if input.shape != other.shape:\n        return False\n    input = tf.cast(input, other.dtype)\n    return tf.reduce_all(tf.equal(input, other))"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor([[1, 2], [3, 4]])",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor([[1, 2], [3, 4]])",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor([[1, 2], [3, 4]])"
  ]
}
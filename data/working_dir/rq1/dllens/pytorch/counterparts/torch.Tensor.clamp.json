{
  "function_name": "torch.Tensor.clamp(input, min=None, max=None)",
  "inputs": [
    "input",
    "min",
    "max"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(4.0)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(2.5)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(), dtype=torch.half)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(1,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(), dtype=torch.half)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5), dtype=torch.float64)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5), dtype=torch.half)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmax = torch.tensor(4.0)\nmin = torch.tensor(np.random.randn(1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(1,1,1,1,1), dtype=torch.float32)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "min = torch.tensor(2.0)\nmax = torch.tensor(4.0)\ninput = torch.tensor(np.random.randn(5,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,min=None,max=None):\n  return torch.Tensor.clamp(input,min,max)",
    "tensorflow": "def tensorflow_call(input, min=None, max=None):\n    if min is not None:\n        min = tf.cast(min, input.dtype)\n    if max is not None:\n        max = tf.cast(max, input.dtype)\n    if min is not None:\n        input = tf.maximum(input, min)\n    if max is not None:\n        input = tf.minimum(input, max)\n    return input"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])\nmin = torch.tensor(2.0)\nmax = torch.tensor(4.0)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(2.5)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(2.5)"
  ]
}
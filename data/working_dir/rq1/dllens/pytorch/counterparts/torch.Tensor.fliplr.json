{
  "function_name": "torch.Tensor.fliplr(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.fliplr(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.reverse(input, axis=[1])"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)"
  ]
}
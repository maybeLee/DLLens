{
  "function_name": "torch.nn.functional.softmax(input, dim=None, _stacklevel=3, dtype=None)",
  "inputs": [
    "input",
    "dim",
    "_stacklevel",
    "dtype"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\n_stacklevel = 3\ndtype = None",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = 3",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = -4",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(2,3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\n_stacklevel = 3\ndtype = None\ndim = 1",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\n_stacklevel = 3\ndtype = None\ndim = 0",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(2,3,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = -2",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\n_stacklevel = 3\ndtype = None\ndim = -2",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = 0",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = -3",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = -1",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = 1",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = 4",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = 5",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(2,3,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\n_stacklevel = 3\ndtype = None\ndim = -1",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(1,3), dtype=torch.float32)",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float64)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = 2",
    "dim = 1\n_stacklevel = 3\ndtype = None\ninput = torch.tensor(np.random.randn(5,3), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\ndtype = None\n_stacklevel = -5"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim=None,_stacklevel=3,dtype=None):\n  return torch.nn.functional.softmax(input,dim,_stacklevel,dtype)",
    "tensorflow": "def tensorflow_call(input, dim=None, _stacklevel=3, dtype=None):\n    if dim is not None:\n        axis = dim\n    else:\n        axis = -1\n    if dtype is not None:\n        return tf.nn.softmax(input, axis=axis, dtype=dtype)\n    return tf.nn.softmax(input, axis=axis)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\n_stacklevel = 3\ndtype = None",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\n_stacklevel = 3\ndtype = None",
    "input = torch.tensor([[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]])\ndim = 1\n_stacklevel = 3\ndtype = None"
  ]
}
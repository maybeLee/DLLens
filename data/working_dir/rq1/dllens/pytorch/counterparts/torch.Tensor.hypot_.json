{
  "function_name": "torch.Tensor.hypot_(input, other)",
  "inputs": [
    "input",
    "other"
  ],
  "sample_inputs": [
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[5.0, 6.0], [7.0, 8.0]])",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor(np.random.randn(1,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other):\n  return torch.Tensor.hypot_(input,other)",
    "tensorflow": "def tensorflow_call(input, other):\n    input = tf.cast(input, tf.float32)\n    other = tf.cast(other, tf.float32)\n    return tf.sqrt(tf.square(input) + tf.square(other))"
  },
  "llm_inputs": [
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[5.0, 6.0], [7.0, 8.0]])",
    "input = torch.tensor([[3.0, 4.0], [5.0, 12.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.0]])"
  ]
}
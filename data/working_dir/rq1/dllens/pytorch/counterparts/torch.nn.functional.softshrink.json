{
  "function_name": "torch.nn.functional.softshrink(input, lambd=0.5)",
  "inputs": [
    "input",
    "lambd"
  ],
  "sample_inputs": [
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\nlambd = torch.tensor(0.5, dtype=torch.float32)",
    "input = torch.tensor([[0.1, -0.2], [0.3, -0.4]], dtype=torch.float32)\nlambd = torch.tensor(0.5, dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]])\nlambd = torch.tensor(0.5)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\nlambd = torch.tensor(np.random.randn(), dtype=torch.half)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\nlambd = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\nlambd = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\nlambd = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "lambd = torch.tensor(0.5, dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,lambd=0.5):\n  return torch.nn.functional.softshrink(input,lambd)",
    "tensorflow": "def tensorflow_call(input, lambd=0.5):\n    lambd = tf.cast(lambd, input.dtype)\n    return tf.where(tf.abs(input) <= lambd, tf.zeros_like(input), input - tf.sign(input) * lambd)"
  },
  "llm_inputs": [
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\nlambd = torch.tensor(0.5, dtype=torch.float32)",
    "input = torch.tensor([[0.1, -0.2], [0.3, -0.4]], dtype=torch.float32)\nlambd = torch.tensor(0.5, dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]])\nlambd = torch.tensor(0.5)"
  ]
}
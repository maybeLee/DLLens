{
  "function_name": "torch.Tensor.log10(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])",
    "input = torch.tensor([1.0, 10.0, 100.0, 1000.0, 0.1, 0.01, 0.001, 0.0001, 1e-05], dtype=torch.float32)[:9]",
    "input = torch.tensor([1.0, 10.0, 100.0, 1000.0, 0.1, 0.01, 0.001, 0.5, 5.0, 50.0])",
    "input = torch.tensor(np.random.randn(5,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(5,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.half)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.log10(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.math.log(input) / tf.math.log(tf.constant(10.0, dtype=input.dtype))"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])",
    "input = torch.tensor([1.0, 10.0, 100.0, 1000.0, 0.1, 0.01, 0.001, 0.0001, 1e-05], dtype=torch.float32)[:9]",
    "input = torch.tensor([1.0, 10.0, 100.0, 1000.0, 0.1, 0.01, 0.001, 0.5, 5.0, 50.0])"
  ]
}
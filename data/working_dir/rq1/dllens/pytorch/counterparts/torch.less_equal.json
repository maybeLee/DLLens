{
  "function_name": "torch.less_equal(input, other, *, out=None)",
  "inputs": [
    "input",
    "other"
  ],
  "sample_inputs": [
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor([5, 4, 3, 2, 1])",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor([[4, 3], [2, 1]])",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nother = torch.tensor([[4, 3], [2, 1]], dtype=torch.float32)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int32)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, (5,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, (5,1,1)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, (5,1,1,1,1)), dtype=torch.int64)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int32)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, (5,1,1)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, (5,1,1,1)), dtype=torch.int64)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, (5,1)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor(np.random.randint(-50, 50, (5,1,1,1,1)), dtype=torch.int64)",
    "other = torch.tensor([5, 4, 3, 2, 1])\ninput = torch.tensor(np.random.randint(-50, 50, (5,1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other):\n  return torch.less_equal(input,other)",
    "tensorflow": "def tensorflow_call(input, other):\n    input = tf.cast(input, other.dtype)\n    return tf.less_equal(input, other)"
  },
  "llm_inputs": [
    "input = torch.tensor([1, 2, 3, 4, 5])\nother = torch.tensor([5, 4, 3, 2, 1])",
    "input = torch.tensor([[1, 2], [3, 4]])\nother = torch.tensor([[4, 3], [2, 1]])",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nother = torch.tensor([[4, 3], [2, 1]], dtype=torch.float32)"
  ]
}
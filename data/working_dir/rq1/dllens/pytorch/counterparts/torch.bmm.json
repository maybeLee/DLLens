{
  "function_name": "torch.bmm(input, mat2, *, deterministic=False, out=None)",
  "inputs": [
    "input",
    "mat2"
  ],
  "sample_inputs": [
    "input = torch.tensor([[[1, 2], [3, 4]]])\nmat2 = torch.tensor([[[1, 0], [0, 1]]])",
    "input = torch.tensor([[[1, 2], [3, 4]]])\nmat2 = torch.tensor(np.random.randint(-50, 50, (1,2,1)), dtype=torch.int64)",
    "mat2 = torch.tensor([[[1, 0], [0, 1]]])\ninput = torch.tensor(np.random.randint(-50, 50, (1,2,2)), dtype=torch.int64)",
    "input = torch.tensor([[[1, 2], [3, 4]]])\nmat2 = torch.tensor(np.random.randint(-50, 50, (1,2,5)), dtype=torch.int64)",
    "mat2 = torch.tensor([[[1, 0], [0, 1]]])\ninput = torch.tensor(np.random.randint(-50, 50, (1,1,2)), dtype=torch.int64)",
    "input = torch.tensor([[[1, 2], [3, 4]]])\nmat2 = torch.tensor(np.random.randint(-50, 50, (1,2,2)), dtype=torch.int64)",
    "mat2 = torch.tensor([[[1, 0], [0, 1]]])\ninput = torch.tensor(np.random.randint(-50, 50, (1,5,2)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,mat2):\n  return torch.bmm(input,mat2)",
    "tensorflow": "def tensorflow_call(input, mat2):\n    mat2 = tf.cast(mat2, input.dtype)\n    return tf.linalg.matmul(input, mat2)"
  },
  "llm_inputs": [
    "input = torch.tensor([[[1, 2], [3, 4]]])\nmat2 = torch.tensor([[[1, 0], [0, 1]]])",
    "input = torch.tensor([[[1, 2], [3, 4]]])\nmat2 = torch.tensor([[[1, 0], [0, 1]]])",
    "input = torch.tensor([[[1, 2], [3, 4]]])\nmat2 = torch.tensor([[[1, 0], [0, 1]]])"
  ]
}
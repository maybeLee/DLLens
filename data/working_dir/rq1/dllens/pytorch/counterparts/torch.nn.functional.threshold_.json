{
  "function_name": "torch.nn.functional.threshold_(input, threshold, value)",
  "inputs": [
    "input",
    "threshold",
    "value"
  ],
  "sample_inputs": [
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nthreshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.8]], dtype=torch.float32)\nthreshold = torch.tensor(0.4, dtype=torch.float32)\nvalue = torch.tensor(0.0, dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.5], [0.9, -0.2]], dtype=torch.float32)\nthreshold = torch.tensor(0.2, dtype=torch.float32)\nvalue = torch.tensor(0.0, dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nvalue = torch.tensor(0.0)\nthreshold = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nthreshold = torch.tensor(0.3)\nvalue = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,3,1,1,1), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(1,3), dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nvalue = torch.tensor(0.0)\nthreshold = torch.tensor(np.random.randn(), dtype=torch.half)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nthreshold = torch.tensor(0.3)\nvalue = torch.tensor(np.random.randn(), dtype=torch.half)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(5,3), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,3,1,1), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float64)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nthreshold = torch.tensor(0.3)\nvalue = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nthreshold = torch.tensor(0.3)\nvalue = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,3,1), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.half)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nvalue = torch.tensor(0.0)\nthreshold = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(4,3), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float16)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nvalue = torch.tensor(0.0)\nthreshold = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "threshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,threshold,value):\n  return torch.nn.functional.threshold_(input,threshold,value)",
    "tensorflow": "def tensorflow_call(input, threshold, value):\n    value = tf.cast(value, input.dtype)\n    threshold = tf.cast(threshold, input.dtype)\n    return tf.where(input > threshold, input, value)"
  },
  "llm_inputs": [
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.7]])\nthreshold = torch.tensor(0.3)\nvalue = torch.tensor(0.0)",
    "input = torch.tensor([[0.1, 0.5, 0.9], [0.2, 0.3, 0.8]], dtype=torch.float32)\nthreshold = torch.tensor(0.4, dtype=torch.float32)\nvalue = torch.tensor(0.0, dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.5], [0.9, -0.2]], dtype=torch.float32)\nthreshold = torch.tensor(0.2, dtype=torch.float32)\nvalue = torch.tensor(0.0, dtype=torch.float32)"
  ]
}
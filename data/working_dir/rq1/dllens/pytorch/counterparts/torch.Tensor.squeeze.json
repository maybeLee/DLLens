{
  "function_name": "torch.Tensor.squeeze(input, dim=None)",
  "inputs": [
    "input",
    "dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 0",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = -2",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = -1",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim=None):\n  return torch.Tensor.squeeze(input,dim)",
    "tensorflow": "def tensorflow_call(input, dim=None):\n    if dim is not None and dim < 0:\n        dim += tf.rank(input)\n    if dim is not None and tf.shape(input)[dim] == 1:\n        return tf.squeeze(input, axis=dim)\n    else:\n        return input"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 0"
  ]
}
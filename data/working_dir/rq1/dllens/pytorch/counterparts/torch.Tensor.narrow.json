{
  "function_name": "torch.Tensor.narrow(input, dimension, start, length)",
  "inputs": [
    "input",
    "dimension",
    "start",
    "length"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndimension = -1",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,4)), dtype=torch.int64)",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 0",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nlength = 2\nstart = 0",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndimension = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nlength = 2\nstart = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nlength = 2\nstart = -3",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 1",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1)), dtype=torch.int64)",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nlength = 2\nstart = -2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndimension = -2",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndimension = 1",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dimension,start,length):\n  return torch.Tensor.narrow(input,dimension,start,length)",
    "tensorflow": "def tensorflow_call(input, dimension, start, length):\n    input_shape = tf.shape(input)\n    if dimension < 0:\n        dimension += tf.rank(input)\n    if start < 0:\n        start += input_shape[dimension]\n    start = tf.clip_by_value(start, 0, input_shape[dimension])\n    sizes = tf.TensorArray(tf.int32, size=0, dynamic_size=True)\n    for i in range(tf.rank(input)):\n        if i == dimension:\n            sizes = sizes.write(i, length)\n        else:\n            sizes = sizes.write(i, input_shape[i])\n    sizes = sizes.stack()\n    begins = tf.TensorArray(tf.int32, size=0, dynamic_size=True)\n    for i in range(tf.rank(input)):\n        if i == dimension:\n            begins = begins.write(i, start)\n        else:\n            begins = begins.write(i, 0)\n    begins = begins.stack()\n    return tf.slice(input, begins, sizes)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 2"
  ]
}
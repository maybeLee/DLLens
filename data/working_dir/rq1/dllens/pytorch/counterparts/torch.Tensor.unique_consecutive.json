{
  "function_name": "torch.Tensor.unique_consecutive(input, return_inverse=False, return_counts=False, dim=None)",
  "inputs": [
    "input",
    "return_inverse",
    "return_counts",
    "dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([1, 2, 2, 3, 4])\nreturn_inverse = False\nreturn_counts = False\ndim = None",
    "input = torch.tensor([1, 2, 2, 3, 3, 3, 4, 5, 5, 6][:9])\nreturn_inverse = False\nreturn_counts = False\ndim = None",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (5,1,1)), dtype=torch.int64)",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (5,1)), dtype=torch.int64)",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 2, 3, 4])\nreturn_inverse = False\ndim = None\nreturn_counts = True",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (5,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([1, 2, 2, 3, 4])\nreturn_counts = False\ndim = None\nreturn_inverse = True",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int64)",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int32)",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (5,1,1,1,1)), dtype=torch.int64)",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "return_inverse = False\nreturn_counts = False\ndim = None\ninput = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,return_inverse=False,return_counts=False,dim=None):\n  return torch.Tensor.unique_consecutive(input,return_inverse,return_counts,dim)",
    "tensorflow": "def tensorflow_call(input, return_inverse=False, return_counts=False, dim=None):\n    input_flat = tf.reshape(input, [-1])\n    (unique_values, idx) = tf.unique(input_flat)\n    if return_inverse:\n        return (unique_values, idx)\n    if return_counts:\n        counts = tf.math.bincount(idx)\n        return (unique_values, counts)\n    return unique_values"
  },
  "llm_inputs": [
    "input = torch.tensor([1, 2, 2, 3, 4])\nreturn_inverse = False\nreturn_counts = False\ndim = None",
    "input = torch.tensor([1, 2, 2, 3, 3, 3, 4, 5, 5, 6][:9])\nreturn_inverse = False\nreturn_counts = False\ndim = None",
    "input = torch.tensor([1, 2, 2, 3, 4])\nreturn_inverse = False\nreturn_counts = False\ndim = None"
  ]
}
{
  "function_name": "torch.Tensor.true_divide_(input, value)",
  "inputs": [
    "input",
    "value"
  ],
  "sample_inputs": [
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor([1, 2, 3], dtype=torch.float32)",
    "value = torch.tensor([1, 2, 3], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "value = torch.tensor([1, 2, 3], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "value = torch.tensor([1, 2, 3], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "value = torch.tensor([1, 2, 3], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,value):\n  return torch.Tensor.true_divide_(input,value)",
    "tensorflow": "def tensorflow_call(input, value):\n    input = tf.cast(input, tf.float32)\n    value = tf.cast(value, tf.float32)\n    return tf.divide(input, value)"
  },
  "llm_inputs": [
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor([1, 2, 3], dtype=torch.float32)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor([1, 2, 3], dtype=torch.float32)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nvalue = torch.tensor([1, 2, 3], dtype=torch.float32)"
  ]
}
{
  "function_name": "torch.resolve_neg(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, -2.0], [3.0, -4.0]])",
    "input = torch.tensor([[1, -2, 3], [-4, 5, -6]])",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.half)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.resolve_neg(input)",
    "tensorflow": "def tensorflow_call(input):\n    return input"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, -2.0], [3.0, -4.0]])",
    "input = torch.tensor([[1.0, -2.0], [3.0, -4.0]])",
    "input = torch.tensor([[1, -2, 3], [-4, 5, -6]])"
  ]
}
{
  "function_name": "torch.narrow(input, dim, start, length)",
  "inputs": [
    "input",
    "dim",
    "start",
    "length"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nstart = 1\nlength = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndim = -2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nlength = 2\nstart = -3",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1)), dtype=torch.int64)",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1)), dtype=torch.int64)",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nlength = 2\nstart = 0",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nlength = 2\nstart = 1",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,4)), dtype=torch.int64)",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nlength = 2\nstart = -2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nstart = 1\nlength = 1",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "dim = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nstart = 1\nlength = 2\ndim = -1"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim,start,length):\n  return torch.narrow(input,dim,start,length)",
    "tensorflow": "def tensorflow_call(input, dim, start, length):\n    input_shape = tf.shape(input)\n    dim = tf.where(dim < 0, tf.add(dim, tf.size(input_shape)), dim)\n    start = tf.where(start < 0, tf.add(start, input_shape[dim]), start)\n    start = tf.clip_by_value(start, 0, input_shape[dim])\n    size = tf.TensorArray(tf.int32, size=0, dynamic_size=True)\n    for i in range(tf.size(input_shape)):\n        if i == dim:\n            size = size.write(i, length)\n        else:\n            size = size.write(i, input_shape[i])\n    size = size.stack()\n    begin = tf.TensorArray(tf.int32, size=0, dynamic_size=True)\n    for i in range(tf.size(input_shape)):\n        if i == dim:\n            begin = begin.write(i, start)\n        else:\n            begin = begin.write(i, 0)\n    begin = begin.stack()\n    return tf.slice(input, begin, size)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 1\nstart = 1\nlength = 2"
  ]
}
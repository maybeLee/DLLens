{
  "function_name": "torch.Tensor.fill_diagonal_(input, fill_value, wrap=False)",
  "inputs": [
    "input",
    "fill_value",
    "wrap"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfill_value = torch.tensor(0)\nwrap = False",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfill_value = torch.tensor(99)\nwrap = False",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfill_value = torch.tensor(10)\nwrap = False",
    "fill_value = torch.tensor(0)\nwrap = False\ninput = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "fill_value = torch.tensor(0)\nwrap = False\ninput = torch.tensor(np.random.randint(-50, 50, (3,1)), dtype=torch.int64)",
    "fill_value = torch.tensor(0)\nwrap = False\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "fill_value = torch.tensor(0)\nwrap = False\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "fill_value = torch.tensor(0)\nwrap = False\ninput = torch.tensor(np.random.randint(-50, 50, (3,4)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nwrap = False\nfill_value = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int32)",
    "fill_value = torch.tensor(0)\nwrap = False\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfill_value = torch.tensor(0)\nwrap = True",
    "fill_value = torch.tensor(0)\nwrap = False\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nwrap = False\nfill_value = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,fill_value,wrap=False):\n  return torch.Tensor.fill_diagonal_(input,fill_value,wrap)",
    "tensorflow": "def tensorflow_call(input, fill_value, wrap=False):\n    shape = tf.shape(input)\n    diag_indices = tf.range(shape[0], dtype=tf.int32)\n    diag = tf.fill((shape[0],), fill_value)\n    mask = tf.linalg.band_part(tf.ones((shape[0], shape[1]), dtype=tf.int32), 0, 0)\n    filled_diagonal = tf.where(mask == 1, diag[:, tf.newaxis], tf.cast(input, fill_value.dtype))\n    return filled_diagonal"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfill_value = torch.tensor(0)\nwrap = False",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfill_value = torch.tensor(99)\nwrap = False",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfill_value = torch.tensor(10)\nwrap = False"
  ]
}
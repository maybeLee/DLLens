{
  "function_name": "torch.nn.functional.huber_loss(input, target, reduction='mean', delta=1.0)",
  "inputs": [
    "input",
    "target",
    "reduction",
    "delta"
  ],
  "sample_inputs": [
    "input = torch.tensor([0.5, 1.0, 1.5])\ntarget = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0",
    "input = torch.tensor([0.5, 1.0, 1.5, 2.0], dtype=torch.float32)\ntarget = torch.tensor([0.0, 1.0, 2.0, 3.0], dtype=torch.float32)\nreduction = 'mean'\ndelta = 1.0",
    "input = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ntarget = torch.tensor([1.0, 1.0, 1.0], dtype=torch.float32)\nreduction = 'mean'\ndelta = 1.0",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\ntarget = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 56.41",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\ntarget = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 47.22",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\ntarget = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 10.73",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([0.5, 1.0, 1.5])\nreduction = 'mean'\ndelta = 1.0\ntarget = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "target = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,target,reduction='mean',delta=1.0):\n  return torch.nn.functional.huber_loss(input,target,reduction,delta)",
    "tensorflow": "def tensorflow_call(input, target, reduction='mean', delta=1.0):\n    if input.dtype != target.dtype:\n        target = tf.cast(target, input.dtype)\n    error = input - target\n    abs_error = tf.abs(error)\n    loss = tf.where(abs_error <= delta, 0.5 * tf.square(error), delta * (abs_error - 0.5 * delta))\n    if reduction == 'mean':\n        return tf.reduce_mean(loss)\n    elif reduction == 'sum':\n        return tf.reduce_sum(loss)\n    else:\n        return loss"
  },
  "llm_inputs": [
    "input = torch.tensor([0.5, 1.0, 1.5])\ntarget = torch.tensor([1.0, 1.0, 1.0])\nreduction = 'mean'\ndelta = 1.0",
    "input = torch.tensor([0.5, 1.0, 1.5, 2.0], dtype=torch.float32)\ntarget = torch.tensor([0.0, 1.0, 2.0, 3.0], dtype=torch.float32)\nreduction = 'mean'\ndelta = 1.0",
    "input = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ntarget = torch.tensor([1.0, 1.0, 1.0], dtype=torch.float32)\nreduction = 'mean'\ndelta = 1.0"
  ]
}
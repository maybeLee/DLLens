{
  "function_name": "torch.Tensor.min(input, dim=None, keepdim=False)",
  "inputs": [
    "input",
    "dim",
    "keepdim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim = 0\nkeepdim = True",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim = 1\nkeepdim = True",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1\nkeepdim = True",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(1,3), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(5,3), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\nkeepdim = True\ndim = -2",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float16)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\nkeepdim = True\ndim = -1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\nkeepdim = True\ndim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\nkeepdim = True\ndim = 1",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.half)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,3,1,1), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,3,1), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "dim = 0\nkeepdim = True\ninput = torch.tensor(np.random.randn(2,3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim = 0\nkeepdim = False"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim=None,keepdim=False):\n  return torch.Tensor.min(input,dim,keepdim)",
    "tensorflow": "def tensorflow_call(input, dim=None, keepdim=False):\n    if tf.rank(input) == 0:\n        return (input, tf.constant(0))\n    if dim is not None and dim < 0:\n        dim = tf.rank(input) + dim\n    min_values = tf.reduce_min(input, axis=dim, keepdims=keepdim)\n    min_indices = tf.argmin(input, axis=dim)\n    return (min_values, min_indices)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim = 0\nkeepdim = True",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim = 1\nkeepdim = True",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1\nkeepdim = True"
  ]
}
{
  "function_name": "torch.Tensor.erfinv_(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])[:5]",
    "input = torch.tensor([0.0, 0.5, -0.5, 0.9, -0.9, 0.1, -0.1, 0.3, -0.3])\ninput = input[:9]",
    "input = torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4], dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(5,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(5,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.erfinv_(input)",
    "tensorflow": "def tensorflow_call(input):\n    input = tf.cast(input, dtype=tf.float32)\n    output = tf.math.erfinv(input)\n    output = tf.where(tf.math.is_inf(output), tf.constant(float('nan'), dtype=tf.float32), output)\n    return output"
  },
  "llm_inputs": [
    "input = torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])[:5]",
    "input = torch.tensor([0.0, 0.5, -0.5, 0.9, -0.9, 0.1, -0.1, 0.3, -0.3])\ninput = input[:9]",
    "input = torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4], dtype=torch.float32)"
  ]
}
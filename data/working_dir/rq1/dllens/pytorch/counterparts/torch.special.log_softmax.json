{
  "function_name": "torch.special.log_softmax(input, dim, *, dtype=None)",
  "inputs": [
    "input",
    "dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]])\ndim = 1",
    "input = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\ndim = 1",
    "dim = 1\ninput = torch.tensor(np.random.randn(3,3), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]])\ndim = 0",
    "dim = 1\ninput = torch.tensor(np.random.randn(4,3), dtype=torch.float32)",
    "dim = 1\ninput = torch.tensor(np.random.randn(2,3,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]])\ndim = -2",
    "dim = 1\ninput = torch.tensor(np.random.randn(2,3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]])\ndim = -1",
    "dim = 1\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "dim = 1\ninput = torch.tensor(np.random.randn(2,3,1), dtype=torch.float32)",
    "dim = 1\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float64)",
    "dim = 1\ninput = torch.tensor(np.random.randn(1,3), dtype=torch.float32)",
    "dim = 1\ninput = torch.tensor(np.random.randn(5,3), dtype=torch.float32)",
    "dim = 1\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim):\n  return torch.special.log_softmax(input,dim)",
    "tensorflow": "def tensorflow_call(input, dim):\n    return tf.nn.log_softmax(input, axis=dim)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]])\ndim = 1",
    "input = torch.tensor([[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]])\ndim = 1",
    "input = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\ndim = 1"
  ]
}
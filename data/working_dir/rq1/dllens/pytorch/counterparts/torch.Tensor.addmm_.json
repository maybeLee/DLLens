{
  "function_name": "torch.Tensor.addmm_(input, mat1, mat2, *, beta=1, alpha=1)",
  "inputs": [
    "input",
    "mat1",
    "mat2"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat2 = torch.tensor([[9.0, 10.0], [11.0, 12.0]])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat2 = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor([[9.0, 10.0], [11.0, 12.0]])\nmat1 = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "mat1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat2 = torch.tensor([[9.0, 10.0], [11.0, 12.0]])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,mat1,mat2):\n  return torch.Tensor.addmm_(input,mat1,mat2)",
    "tensorflow": "def tensorflow_call(input, mat1, mat2):\n    product = tf.linalg.matmul(mat1, mat2)\n    result = tf.add(input, product)\n    return result"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat2 = torch.tensor([[9.0, 10.0], [11.0, 12.0]])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat2 = torch.tensor([[9.0, 10.0], [11.0, 12.0]])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat2 = torch.tensor([[9.0, 10.0], [11.0, 12.0]])"
  ]
}
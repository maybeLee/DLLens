{
  "function_name": "torch.addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None)",
  "inputs": [
    "input",
    "mat1",
    "mat2"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0]])\nmat1 = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])",
    "input = torch.tensor([[1.0]])\nmat1 = torch.tensor([[2.0, 3.0], [4.0, 5.0]])\nmat2 = torch.tensor([[6.0, 7.0], [8.0, 9.0]])",
    "input = torch.tensor([[1.0]], dtype=torch.float32)\nmat1 = torch.tensor([[2.0, 3.0], [4.0, 5.0]], dtype=torch.float32)\nmat2 = torch.tensor([[6.0, 7.0], [8.0, 9.0]], dtype=torch.float32)",
    "mat1 = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\ninput = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat1 = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0]])\nmat1 = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "mat1 = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([[1.0]])\nmat1 = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat1 = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\nmat1 = torch.tensor(np.random.randn(3,2), dtype=torch.float32)",
    "mat1 = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,mat1,mat2):\n  return torch.addmm(input,mat1,mat2)",
    "tensorflow": "def tensorflow_call(input, mat1, mat2):\n    return tf.matmul(mat1, mat2) + input"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0]])\nmat1 = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmat2 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])",
    "input = torch.tensor([[1.0]])\nmat1 = torch.tensor([[2.0, 3.0], [4.0, 5.0]])\nmat2 = torch.tensor([[6.0, 7.0], [8.0, 9.0]])",
    "input = torch.tensor([[1.0]], dtype=torch.float32)\nmat1 = torch.tensor([[2.0, 3.0], [4.0, 5.0]], dtype=torch.float32)\nmat2 = torch.tensor([[6.0, 7.0], [8.0, 9.0]], dtype=torch.float32)"
  ]
}
{
  "function_name": "torch.nonzero(input, *, out=None, as_tuple=False)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [0, 8, 9]])",
    "input = torch.tensor([[1, 0, 3], [0, 5, 0]])",
    "input = torch.tensor([[1, 0, 3], [0, 5, 0], [7, 0, 9]])",
    "input = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,3,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.nonzero(input)",
    "tensorflow": "def tensorflow_call(input):\n    if tf.rank(input) == 0:\n        return tf.constant([], dtype=tf.int64)\n    return tf.where(input != 0)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [0, 8, 9]])",
    "input = torch.tensor([[1, 0, 3], [0, 5, 0]])",
    "input = torch.tensor([[1, 0, 3], [0, 5, 0], [7, 0, 9]])"
  ]
}
{
  "function_name": "torch.ldexp(input, other, *, out=None)",
  "inputs": [
    "input",
    "other"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([1, 2, 3])",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, (3,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, (3,1,1,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, (3,1,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor(np.random.randint(-50, 50, (3,1,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3])\ninput = torch.tensor(np.random.randn(3), dtype=torch.float16)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other):\n  return torch.ldexp(input,other)",
    "tensorflow": "def tensorflow_call(input, other):\n    return tf.multiply(tf.cast(input, tf.float32), tf.pow(2.0, tf.cast(other, tf.float32)))"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([1, 2, 3])",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([1, 2, 3])",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([1, 2, 3])"
  ]
}
{
  "function_name": "torch.flatten(input, start_dim=0, end_dim=-1)",
  "inputs": [
    "input",
    "start_dim",
    "end_dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nstart_dim = 0\nend_dim = 1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\nstart_dim = 0\nend_dim = 1",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nend_dim = 1\nstart_dim = -1",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nstart_dim = 0\nend_dim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nend_dim = 1\nstart_dim = -2",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nend_dim = 1\nstart_dim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nend_dim = 1\nstart_dim = 1",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nstart_dim = 0\nend_dim = -1",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nstart_dim = 0\nend_dim = -2",
    "start_dim = 0\nend_dim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,start_dim=0,end_dim=-1):\n  return torch.flatten(input,start_dim,end_dim)",
    "tensorflow": "def tensorflow_call(input, start_dim=0, end_dim=-1):\n    input_shape = tf.shape(input)\n    if end_dim == -1:\n        end_dim = len(input_shape) - 1\n    new_shape = tf.concat([tf.shape(input)[:start_dim], [-1], tf.shape(input)[end_dim + 1:]], axis=0)\n    return tf.reshape(input, new_shape)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nstart_dim = 0\nend_dim = 1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\nstart_dim = 0\nend_dim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nstart_dim = 0\nend_dim = 1"
  ]
}
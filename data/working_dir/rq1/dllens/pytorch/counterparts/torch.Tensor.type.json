{
  "function_name": "torch.Tensor.type(input, dtype=None, non_blocking=False, **kwargs)",
  "inputs": [
    "input",
    "dtype",
    "non_blocking"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ndtype = torch.float64\nnon_blocking = False",
    "input = torch.tensor([[1, 2], [3, 4]])\ndtype = torch.float32\nnon_blocking = False",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(3,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ndtype = torch.float64\nnon_blocking = True",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "dtype = torch.float64\nnon_blocking = False\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dtype=None,non_blocking=False):\n  return torch.Tensor.type(input,dtype,non_blocking)",
    "tensorflow": "def tensorflow_call(input, dtype=None, non_blocking=False):\n    if dtype is not None:\n        return tf.cast(input, dtype)\n    return input"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ndtype = torch.float64\nnon_blocking = False",
    "input = torch.tensor([[1, 2], [3, 4]])\ndtype = torch.float32\nnon_blocking = False",
    "input = torch.tensor([[1, 2], [3, 4]])\ndtype = torch.float32\nnon_blocking = False"
  ]
}
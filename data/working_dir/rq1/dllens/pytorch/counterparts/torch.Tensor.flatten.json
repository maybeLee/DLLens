{
  "function_name": "torch.Tensor.flatten(input, start_dim=0, end_dim=-1)",
  "inputs": [
    "input",
    "start_dim",
    "end_dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nstart_dim = 0\nend_dim = -1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\nstart_dim = 0\nend_dim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\nstart_dim = 0\nend_dim = 1",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,2), dtype=torch.float64)",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,5), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nstart_dim = 0\nend_dim = -2",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nstart_dim = 0\nend_dim = 0",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,2,1,1), dtype=torch.float32)",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,2,1,1,1), dtype=torch.float32)",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,2,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nstart_dim = 0\nend_dim = 1",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nend_dim = -1\nstart_dim = 0",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,2), dtype=torch.half)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nend_dim = -1\nstart_dim = -2",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3,2), dtype=torch.float16)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nend_dim = -1\nstart_dim = -1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nend_dim = -1\nstart_dim = 1",
    "start_dim = 0\nend_dim = -1\ninput = torch.tensor(np.random.randn(3), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,start_dim=0,end_dim=-1):\n  return torch.Tensor.flatten(input,start_dim,end_dim)",
    "tensorflow": "def tensorflow_call(input, start_dim=0, end_dim=-1):\n    input_shape = tf.shape(input)\n    num_dims = tf.rank(input)\n    if num_dims == 0:\n        return tf.reshape(input, [1])\n    if end_dim < 0:\n        end_dim += num_dims\n    if end_dim < start_dim:\n        raise ValueError('end_dim must be greater than or equal to start_dim')\n    new_shape = tf.concat([tf.shape(input)[:start_dim], [tf.reduce_prod(input_shape[start_dim:end_dim + 1])], tf.shape(input)[end_dim + 1:]], axis=0)\n    return tf.reshape(input, new_shape)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32)\nstart_dim = 0\nend_dim = -1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\nstart_dim = 0\nend_dim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\nstart_dim = 0\nend_dim = 1"
  ]
}
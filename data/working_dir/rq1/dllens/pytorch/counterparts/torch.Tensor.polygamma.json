{
  "function_name": "torch.Tensor.polygamma(input, n)",
  "inputs": [
    "input",
    "n"
  ],
  "sample_inputs": [
    "input = torch.tensor(2.0)\nn = torch.tensor(1)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(1,1,1,1), dtype=torch.float32)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(1,1,1), dtype=torch.float32)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(), dtype=torch.half)",
    "n = torch.tensor(1)\ninput = torch.tensor(np.random.randn(1,1,1,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,n):\n  return torch.Tensor.polygamma(input,n)",
    "tensorflow": "def tensorflow_call(input, n):\n    input = tf.cast(input, tf.float32)\n    n = tf.cast(n, tf.float32)\n    return tf.math.polygamma(n, input)"
  },
  "llm_inputs": [
    "input = torch.tensor(2.0)\nn = torch.tensor(1)",
    "input = torch.tensor(2.0)\nn = torch.tensor(1)",
    "input = torch.tensor(2.0)\nn = torch.tensor(1)"
  ]
}
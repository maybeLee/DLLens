{
  "function_name": "torch.nn.functional.leaky_relu(input, negative_slope=0.01, inplace=False)",
  "inputs": [
    "input",
    "negative_slope",
    "inplace"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, -1.0], [0.5, -0.5]])\nnegative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)",
    "input = torch.tensor([[1.0, -1.0, 0.0], [0.5, -0.5, 2.0]])\nnegative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)",
    "input = torch.tensor([[1.0, -1.0], [2.0, -2.0]])\nnegative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)",
    "input = torch.tensor([[1.0, -1.0], [0.5, -0.5]])\ninplace = torch.tensor(False)\nnegative_slope = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, -1.0], [0.5, -0.5]])\ninplace = torch.tensor(False)\nnegative_slope = torch.tensor(np.random.randn(), dtype=torch.half)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, -1.0], [0.5, -0.5]])\ninplace = torch.tensor(False)\nnegative_slope = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, -1.0], [0.5, -0.5]])\ninplace = torch.tensor(False)\nnegative_slope = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "negative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,negative_slope=0.01,inplace=False):\n  return torch.nn.functional.leaky_relu(input,negative_slope,inplace)",
    "tensorflow": "def tensorflow_call(input, negative_slope=0.01, inplace=False):\n    return tf.nn.leaky_relu(input, alpha=negative_slope.numpy() if isinstance(negative_slope, tf.Tensor) else negative_slope)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, -1.0], [0.5, -0.5]])\nnegative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)",
    "input = torch.tensor([[1.0, -1.0, 0.0], [0.5, -0.5, 2.0]])\nnegative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)",
    "input = torch.tensor([[1.0, -1.0], [2.0, -2.0]])\nnegative_slope = torch.tensor(0.01)\ninplace = torch.tensor(False)"
  ]
}
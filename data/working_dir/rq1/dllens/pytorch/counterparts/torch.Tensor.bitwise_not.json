{
  "function_name": "torch.Tensor.bitwise_not(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9][:5])",
    "input = torch.tensor([[1, 0], [0, 1]], dtype=torch.int32)",
    "input = torch.tensor([[1, 0, 1], [0, 1, 0]], dtype=torch.int32)",
    "input = torch.tensor(np.random.randint(-50, 50, (5,1,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int32)",
    "input = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (5,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.bitwise_not(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.bitwise.invert(input)"
  },
  "llm_inputs": [
    "input = torch.tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9][:5])",
    "input = torch.tensor([[1, 0], [0, 1]], dtype=torch.int32)",
    "input = torch.tensor([[1, 0, 1], [0, 1, 0]], dtype=torch.int32)"
  ]
}
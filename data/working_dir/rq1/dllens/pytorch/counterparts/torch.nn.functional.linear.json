{
  "function_name": "torch.nn.functional.linear(input, weight, bias=None)",
  "inputs": [
    "input",
    "weight",
    "bias"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([1.0, 1.0])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([0.1, 0.2])",
    "weight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([1.0, 1.0])\ninput = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "weight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([1.0, 1.0])\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "weight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([1.0, 1.0])\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nbias = torch.tensor([1.0, 1.0])\nweight = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "weight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([1.0, 1.0])\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,weight,bias=None):\n  return torch.nn.functional.linear(input,weight,bias)",
    "tensorflow": "def tensorflow_call(input, weight, bias=None):\n    if input.ndim == 1:\n        input = tf.expand_dims(input, axis=0)\n    output = tf.linalg.matmul(input, tf.transpose(weight))\n    if bias is not None:\n        output = output + bias\n    return output"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([1.0, 1.0])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([1.0, 1.0])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nweight = torch.tensor([[0.5, 0.5], [0.5, 0.5]])\nbias = torch.tensor([0.1, 0.2])"
  ]
}
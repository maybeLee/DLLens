{
  "function_name": "torch.exp2(input, *, out=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "input = torch.tensor([1.0, 2.0, 3.0])",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.exp2(input)",
    "tensorflow": "def tensorflow_call(input):\n    input = tf.cast(input, dtype=tf.float32)\n    return tf.exp(input * tf.math.log(2.0))"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "input = torch.tensor([1.0, 2.0, 3.0])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])"
  ]
}
{
  "function_name": "torch.searchsorted(sorted_sequence, values, *, out_int32=False, right=False, out=None)",
  "inputs": [
    "sorted_sequence",
    "values"
  ],
  "sample_inputs": [
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor([0, 4, 6, 10])",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor([2, 4, 6])",
    "sorted_sequence = torch.tensor([1, 2, 4, 5, 7, 9])\nvalues = torch.tensor([3, 6, 8])",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (4,1,1)), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int32)",
    "values = torch.tensor([0, 4, 6, 10])\nsorted_sequence = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int32)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (4,1,1,1)), dtype=torch.int64)",
    "values = torch.tensor([0, 4, 6, 10])\nsorted_sequence = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int64)",
    "values = torch.tensor([0, 4, 6, 10])\nsorted_sequence = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (4,1,1,1,1)), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (4,1)), dtype=torch.int64)",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int64)",
    "values = torch.tensor([0, 4, 6, 10])\nsorted_sequence = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(sorted_sequence,values):\n  return torch.searchsorted(sorted_sequence,values)",
    "tensorflow": "def tensorflow_call(sorted_sequence, values):\n    sorted_sequence = tf.cast(sorted_sequence, tf.int32)\n    values = tf.cast(values, tf.int32)\n    values = tf.reshape(values, [-1])\n    return tf.searchsorted(sorted_sequence, values)"
  },
  "llm_inputs": [
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor([0, 4, 6, 10])",
    "sorted_sequence = torch.tensor([1, 3, 5, 7, 9])\nvalues = torch.tensor([2, 4, 6])",
    "sorted_sequence = torch.tensor([1, 2, 4, 5, 7, 9])\nvalues = torch.tensor([3, 6, 8])"
  ]
}
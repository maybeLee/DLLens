{
  "function_name": "torch.unbind(input, dim=0)",
  "inputs": [
    "input",
    "dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = torch.tensor(0)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "dim = torch.tensor(0)\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim=0):\n  return torch.unbind(input,dim)",
    "tensorflow": "def tensorflow_call(input, dim=0):\n    dim = tf.cast(dim, tf.int32)\n    size = tf.shape(input)[dim]\n    return tf.split(input, num_or_size_splits=size.numpy(), axis=dim)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = torch.tensor(0)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1"
  ]
}
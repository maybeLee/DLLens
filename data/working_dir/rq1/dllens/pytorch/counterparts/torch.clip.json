{
  "function_name": "torch.clip(input, min=None, max=None, *, out=None)",
  "inputs": [
    "input",
    "min",
    "max"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(2.5)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmin = torch.tensor(2.0)\nmax = torch.tensor(3.0)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nmin = torch.tensor(1.5, dtype=torch.float32)\nmax = torch.tensor(2.5, dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(), dtype=torch.half)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(), dtype=torch.half)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(1,1,1,1), dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(1,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(), dtype=torch.float64)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(1,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(), dtype=torch.float16)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(1,1,1,1), dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nmax = torch.tensor(2.5)\nmin = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "min = torch.tensor(1.5)\nmax = torch.tensor(2.5)\ninput = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,min=None,max=None):\n  return torch.clip(input,min,max)",
    "tensorflow": "def tensorflow_call(input, min=None, max=None):\n    min = tf.cast(min, input.dtype)\n    max = tf.cast(max, input.dtype)\n    clipped = tf.where(input < min, min, input)\n    clipped = tf.where(clipped > max, max, clipped)\n    return clipped"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0])\nmin = torch.tensor(1.5)\nmax = torch.tensor(2.5)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nmin = torch.tensor(2.0)\nmax = torch.tensor(3.0)",
    "input = torch.tensor([1, 2, 3], dtype=torch.float32)\nmin = torch.tensor(1.5, dtype=torch.float32)\nmax = torch.tensor(2.5, dtype=torch.float32)"
  ]
}
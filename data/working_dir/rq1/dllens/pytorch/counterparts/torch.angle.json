{
  "function_name": "torch.angle(input, *, out=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 0.0, -1.0, 0.5, -0.5], dtype=torch.float32)",
    "input = torch.tensor([1.0, 0.0, 0.0, 1.0])",
    "input = torch.tensor([1.0 + 1j, 2.0 + 2j, 3.0 + 3j])",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(4), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(5,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.angle(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.math.angle(tf.cast(input, tf.complex64))"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 0.0, -1.0, 0.5, -0.5], dtype=torch.float32)",
    "input = torch.tensor([1.0, 0.0, 0.0, 1.0])",
    "input = torch.tensor([1.0 + 1j, 2.0 + 2j, 3.0 + 3j])"
  ]
}
{
  "function_name": "torch.Tensor.vsplit(input, split_size_or_sections)",
  "inputs": [
    "input",
    "split_size_or_sections"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\nsplit_size_or_sections = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsplit_size_or_sections = 1",
    "input = torch.tensor([[1, 2], [3, 4]])\nsplit_size_or_sections = 1",
    "split_size_or_sections = 2\ninput = torch.tensor(np.random.randint(-50, 50, (4,2,1,1,1)), dtype=torch.int64)",
    "split_size_or_sections = 2\ninput = torch.tensor(np.random.randint(-50, 50, (4,2)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\nsplit_size_or_sections = 1",
    "split_size_or_sections = 2\ninput = torch.tensor(np.random.randint(-50, 50, (4,2,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\nsplit_size_or_sections = 4",
    "split_size_or_sections = 2\ninput = torch.tensor(np.random.randint(-50, 50, (4,5)), dtype=torch.int64)",
    "split_size_or_sections = 2\ninput = torch.tensor(np.random.randint(-50, 50, (4,2)), dtype=torch.int64)",
    "split_size_or_sections = 2\ninput = torch.tensor(np.random.randint(-50, 50, (4,2,1,1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,split_size_or_sections):\n  return torch.Tensor.vsplit(input,split_size_or_sections)",
    "tensorflow": "def tensorflow_call(input, split_size_or_sections):\n    if isinstance(split_size_or_sections, int):\n        return tf.split(input, num_or_size_splits=split_size_or_sections, axis=0)\n    else:\n        return tf.split(input, num_or_size_splits=split_size_or_sections, axis=0)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4], [5, 6], [7, 8]])\nsplit_size_or_sections = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsplit_size_or_sections = 1",
    "input = torch.tensor([[1, 2], [3, 4]])\nsplit_size_or_sections = 1"
  ]
}
{
  "function_name": "torch.nn.functional.hardsigmoid(input, inplace=False)",
  "inputs": [
    "input",
    "inplace"
  ],
  "sample_inputs": [
    "input = torch.tensor([[0.5, -1.0], [2.0, -0.5]])\ninplace = False",
    "input = torch.tensor([[0.5, -0.5], [1.0, -1.0]])\ninplace = False",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\ninplace = False",
    "inplace = False\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor([[0.5, -1.0], [2.0, -0.5]])\ninplace = True",
    "inplace = False\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "inplace = False\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "inplace = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,inplace=False):\n  return torch.nn.functional.hardsigmoid(input,inplace)",
    "tensorflow": "def tensorflow_call(input, inplace=False):\n    return tf.clip_by_value((input + 3) / 6, 0, 1)"
  },
  "llm_inputs": [
    "input = torch.tensor([[0.5, -1.0], [2.0, -0.5]])\ninplace = False",
    "input = torch.tensor([[0.5, -0.5], [1.0, -1.0]])\ninplace = False",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]], dtype=torch.float32)\ninplace = False"
  ]
}
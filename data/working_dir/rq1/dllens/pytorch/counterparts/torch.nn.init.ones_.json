{
  "function_name": "torch.nn.init.ones_(tensor)",
  "inputs": [
    "tensor"
  ],
  "sample_inputs": [
    "tensor = torch.tensor([[1.0, 2.0], [3.0, 4.0]], dtype=torch.float32)",
    "tensor = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "tensor = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "tensor = torch.tensor(np.random.randn(4,2), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "tensor = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "tensor = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "tensor = torch.tensor(np.random.randn(2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(tensor):\n  return torch.nn.init.ones_(tensor)",
    "tensorflow": "def tensorflow_call(tensor):\n    return tf.ones_like(tensor)"
  },
  "llm_inputs": [
    "tensor = torch.tensor([[1.0, 2.0], [3.0, 4.0]], dtype=torch.float32)",
    "tensor = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "tensor = torch.tensor([[1.0, 2.0], [3.0, 4.0]])"
  ]
}
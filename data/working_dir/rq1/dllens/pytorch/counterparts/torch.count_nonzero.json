{
  "function_name": "torch.count_nonzero(input, dim=None)",
  "inputs": [
    "input",
    "dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 0, 3], [0, 5, 0], [7, 0, 9]])\ndim = 0",
    "input = torch.tensor([[1, 0, 3], [0, 0, 0], [4, 5, 0]])\ndim = 0",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 0, 3], [0, 5, 0], [7, 0, 9]])\ndim = -1",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 0, 3], [0, 5, 0], [7, 0, 9]])\ndim = 1",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,1)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1,1)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1)), dtype=torch.int64)",
    "dim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,4)), dtype=torch.int64)",
    "input = torch.tensor([[1, 0, 3], [0, 5, 0], [7, 0, 9]])\ndim = -2"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim=None):\n  return torch.count_nonzero(input,dim)",
    "tensorflow": "def tensorflow_call(input, dim=None):\n    if tf.rank(input) == 0:\n        return tf.cast(input != 0, tf.int32)\n    return tf.reduce_sum(tf.cast(input != 0, tf.int32), axis=dim)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 0, 3], [0, 5, 0], [7, 0, 9]])\ndim = 0",
    "input = torch.tensor([[1, 0, 3], [0, 0, 0], [4, 5, 0]])\ndim = 0",
    "input = torch.tensor([[1, 0, 3], [0, 0, 0], [4, 5, 0]])\ndim = 0"
  ]
}
{
  "function_name": "torch.argsort(input, dim=-1, descending=False)",
  "inputs": [
    "input",
    "dim",
    "descending"
  ],
  "sample_inputs": [
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndim = 1\ndescending = True",
    "input = torch.tensor([5, 2, 8, 1, 4])\ndim = -1\ndescending = False",
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndescending = True\ndim = -1",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndescending = True\ndim = 1",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (4,3)), dtype=torch.int64)",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)",
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndescending = True\ndim = 0",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndim = 1\ndescending = False",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndescending = True\ndim = -2",
    "dim = 1\ndescending = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim=-1,descending=False):\n  return torch.argsort(input,dim,descending)",
    "tensorflow": "def tensorflow_call(input, dim=-1, descending=False):\n    sorted_indices = tf.argsort(input, axis=dim, direction='DESCENDING' if descending else 'ASCENDING')\n    return sorted_indices"
  },
  "llm_inputs": [
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndim = 1\ndescending = True",
    "input = torch.tensor([[3, 1, 2], [6, 5, 4]])\ndim = 1\ndescending = True",
    "input = torch.tensor([5, 2, 8, 1, 4])\ndim = -1\ndescending = False"
  ]
}
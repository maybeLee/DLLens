{
  "function_name": "torch.isinf(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, float('inf')]])",
    "input = torch.tensor([[1.0, 2.0], [float('inf'), 4.0]])",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.isinf(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.math.is_inf(input)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, float('inf')]])",
    "input = torch.tensor([[1.0, 2.0], [float('inf'), 4.0]])",
    "input = torch.tensor([[1.0, 2.0], [3.0, float('inf')]])"
  ]
}
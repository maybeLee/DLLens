{
  "function_name": "torch.Tensor.swapdims(input, dim0, dim1)",
  "inputs": [
    "input",
    "dim0",
    "dim1"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim0 = 0\ndim1 = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim0 = 0\ndim1 = -2",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(1,3), dtype=torch.float32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim1 = 1\ndim0 = -2",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(5,3), dtype=torch.float32)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float64)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.half)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim1 = 1\ndim0 = 0",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim1 = 1\ndim0 = -1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim1 = 1\ndim0 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim0 = 0\ndim1 = -1",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float16)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,3,1,1), dtype=torch.float32)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,3,1,1,1), dtype=torch.float32)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randn(2,3,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim0,dim1):\n  return torch.Tensor.swapdims(input,dim0,dim1)",
    "tensorflow": "def tensorflow_call(input, dim0, dim1):\n    rank = tf.rank(input)\n    dim0 = tf.where(dim0 < 0, rank + dim0, dim0)\n    dim1 = tf.where(dim1 < 0, rank + dim1, dim1)\n    dim0 = tf.clip_by_value(dim0, 0, rank - 1)\n    dim1 = tf.clip_by_value(dim1, 0, rank - 1)\n    if tf.equal(dim0, dim1):\n        return input\n    perm = [dim1, dim0] + [i for i in range(rank) if i not in (dim0, dim1)]\n    return tf.transpose(input, perm=perm)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndim0 = 0\ndim1 = 1"
  ]
}
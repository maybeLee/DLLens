{
  "function_name": "torch.Tensor.tensor_split(input, indices_or_sections, dim=0)",
  "inputs": [
    "input",
    "indices_or_sections",
    "dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nindices_or_sections = 2\ndim = 0",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 0\nindices_or_sections = 5",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nindices_or_sections = 2\ndim = -2",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,4)), dtype=torch.int64)",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3)), dtype=torch.int64)",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nindices_or_sections = 2\ndim = -1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 0\nindices_or_sections = 2",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 0\nindices_or_sections = 1",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,2)), dtype=torch.int64)",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 0\nindices_or_sections = 4",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim = 0\nindices_or_sections = 3",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nindices_or_sections = 2\ndim = 1",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1)), dtype=torch.int64)",
    "indices_or_sections = 2\ndim = 0\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,indices_or_sections,dim=0):\n  return torch.Tensor.tensor_split(input,indices_or_sections,dim)",
    "tensorflow": "def tensorflow_call(input, indices_or_sections, dim=0):\n    split_size = tf.shape(input)[dim] // indices_or_sections\n    remainder = tf.shape(input)[dim] % indices_or_sections\n    sizes = [split_size + 1 if i < remainder else split_size for i in range(indices_or_sections)]\n    return tf.split(input, sizes, axis=dim)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nindices_or_sections = 2\ndim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nindices_or_sections = 2\ndim = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nindices_or_sections = 2\ndim = 0"
  ]
}
{
  "function_name": "torch.isposinf(input, *, out=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, float('inf')], [2.0, 3.0]])",
    "input = torch.tensor([float('inf'), 1.0, -1.0, 0.0, 2.0])",
    "input = torch.tensor([1.0, float('inf'), -1.0, 0.0, 5.0])",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,4), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.isposinf(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.equal(tf.cast(input, tf.float32), tf.constant(float('inf')))"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, float('inf')], [2.0, 3.0]])",
    "input = torch.tensor([float('inf'), 1.0, -1.0, 0.0, 2.0])",
    "input = torch.tensor([1.0, float('inf'), -1.0, 0.0, 5.0])"
  ]
}
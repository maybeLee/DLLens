{
  "function_name": "torch.overrides.is_tensor_like(inp)",
  "inputs": [
    "inp"
  ],
  "sample_inputs": [
    "inp = torch.tensor([1, 2, 3, 4, 5])",
    "inp = torch.tensor([1, 2, 3], dtype=torch.float32)",
    "inp = torch.tensor([[1, 2], [3, 4]])",
    "inp = torch.tensor(np.random.randint(-50, 50, (5,1,1,1)), dtype=torch.int64)",
    "inp = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int32)",
    "inp = torch.tensor(np.random.randint(-50, 50, (5)), dtype=torch.int64)",
    "inp = torch.tensor(np.random.randint(-50, 50, (5,1)), dtype=torch.int64)",
    "inp = torch.tensor(np.random.randint(-50, 50, (5,1,1)), dtype=torch.int64)",
    "inp = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "inp = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "inp = torch.tensor(np.random.randint(-50, 50, (5,1,1,1,1)), dtype=torch.int64)",
    "inp = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(inp):\n  return torch.overrides.is_tensor_like(inp)",
    "tensorflow": "def tensorflow_call(inp):\n    return tf.is_tensor(inp)"
  },
  "llm_inputs": [
    "inp = torch.tensor([1, 2, 3, 4, 5])",
    "inp = torch.tensor([1, 2, 3], dtype=torch.float32)",
    "inp = torch.tensor([[1, 2], [3, 4]])"
  ]
}
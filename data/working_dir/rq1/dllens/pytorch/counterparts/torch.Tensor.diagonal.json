{
  "function_name": "torch.Tensor.diagonal(input, offset=0, dim1=0, dim2=1)",
  "inputs": [
    "input",
    "offset",
    "dim1",
    "dim2"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\noffset = 1\ndim1 = 0\ndim2 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = 1",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int32)",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = -5",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = 3",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = -4",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\noffset = 1\ndim2 = 1\ndim1 = -2",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\noffset = 1\ndim1 = 0\ndim2 = -1",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = -2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\noffset = 1\ndim2 = 1\ndim1 = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = 4",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1)), dtype=torch.int64)",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = 5",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = -1",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (4,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndim1 = 0\ndim2 = 1\noffset = -3",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "offset = 1\ndim1 = 0\ndim2 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,3,1,1,1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,offset=0,dim1=0,dim2=1):\n  return torch.Tensor.diagonal(input,offset,dim1,dim2)",
    "tensorflow": "def tensorflow_call(input, offset=0, dim1=0, dim2=1):\n    shape = tf.shape(input)\n    dim2 = dim2 if dim2 >= 0 else tf.rank(input) + dim2\n    row_indices = tf.range(shape[dim1])\n    col_indices = row_indices + offset\n    valid_mask = tf.logical_and(tf.logical_and(row_indices >= 0, row_indices < shape[dim1]), tf.logical_and(col_indices >= 0, col_indices < shape[dim2]))\n    valid_row_indices = tf.boolean_mask(row_indices, valid_mask)\n    valid_col_indices = tf.boolean_mask(col_indices, valid_mask)\n    valid_indices = tf.stack([valid_row_indices, valid_col_indices], axis=-1)\n    diagonal_elements = tf.gather_nd(input, valid_indices)\n    return diagonal_elements"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\noffset = 1\ndim1 = 0\ndim2 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\noffset = 1\ndim1 = 0\ndim2 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\noffset = 1\ndim1 = 0\ndim2 = 1"
  ]
}
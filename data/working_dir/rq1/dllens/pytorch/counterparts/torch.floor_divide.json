{
  "function_name": "torch.floor_divide(input, other, *, out=None)",
  "inputs": [
    "input",
    "other"
  ],
  "sample_inputs": [
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor([[2, 2], [3, 1]])",
    "input = torch.tensor([[8, 4], [6, 2]])\nother = torch.tensor([[2, 2], [3, 1]])",
    "input = torch.tensor([[5, 10], [15, 20]])\nother = torch.tensor([[2, 3], [4, 5]])",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int32)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2,1,1,1)), dtype=torch.int64)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2,1)), dtype=torch.int64)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int32)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2,1)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (2,2,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, (1,2)), dtype=torch.int64)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, (1,2)), dtype=torch.int64)",
    "other = torch.tensor([[2, 2], [3, 1]])\ninput = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other):\n  return torch.floor_divide(input,other)",
    "tensorflow": "def tensorflow_call(input, other):\n    input = tf.cast(input, tf.int32)\n    other = tf.cast(other, tf.int32)\n    return tf.math.floordiv(input, other)"
  },
  "llm_inputs": [
    "input = torch.tensor([[8, 4], [6, 3]])\nother = torch.tensor([[2, 2], [3, 1]])",
    "input = torch.tensor([[8, 4], [6, 2]])\nother = torch.tensor([[2, 2], [3, 1]])",
    "input = torch.tensor([[5, 10], [15, 20]])\nother = torch.tensor([[2, 3], [4, 5]])"
  ]
}
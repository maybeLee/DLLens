{
  "function_name": "torch.Tensor.argmax(input, dim=None, keepdim=False)",
  "inputs": [
    "input",
    "dim",
    "keepdim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1\nkeepdim = True",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nkeepdim = True\ndim = 1",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nkeepdim = True\ndim = -1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nkeepdim = True\ndim = 0",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1\nkeepdim = False",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nkeepdim = True\ndim = -2",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "dim = 1\nkeepdim = True\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim=None,keepdim=False):\n  return torch.Tensor.argmax(input,dim,keepdim)",
    "tensorflow": "def tensorflow_call(input, dim=None, keepdim=False):\n    result = tf.argmax(input, axis=dim)\n    if keepdim:\n        result = tf.expand_dims(result, axis=dim)\n    return result"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1\nkeepdim = True",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1\nkeepdim = True",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim = 1\nkeepdim = True"
  ]
}
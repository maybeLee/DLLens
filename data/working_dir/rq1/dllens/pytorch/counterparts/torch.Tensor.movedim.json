{
  "function_name": "torch.Tensor.movedim(input, source, destination)",
  "inputs": [
    "input",
    "source",
    "destination"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsource = 0\ndestination = 1",
    "input = torch.tensor([[1, 2], [3, 4]])\nsource = 0\ndestination = 1",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndestination = 1\nsource = -1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsource = 0\ndestination = -2",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,4)), dtype=torch.int64)",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndestination = 1\nsource = -2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndestination = 1\nsource = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsource = 0\ndestination = 0",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndestination = 1\nsource = 1",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsource = 0\ndestination = -1",
    "source = 0\ndestination = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,source,destination):\n  return torch.Tensor.movedim(input,source,destination)",
    "tensorflow": "def tensorflow_call(input, source, destination):\n    input_shape = tf.shape(input)\n    rank = tf.rank(input)\n    source = tf.where(source < 0, rank + source, source)\n    destination = tf.where(destination < 0, rank + destination, destination)\n    perm = tf.range(rank)\n    perm = tf.tensor_scatter_nd_update(perm, [[source], [destination]], [perm[destination], perm[source]])\n    return tf.transpose(input, perm)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsource = 0\ndestination = 1",
    "input = torch.tensor([[1, 2], [3, 4]])\nsource = 0\ndestination = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsource = 0\ndestination = 1"
  ]
}
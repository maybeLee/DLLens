{
  "function_name": "torch.Tensor.sparse_dim(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])",
    "input = torch.tensor([1, 2, 3, 4, 5])",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,5), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.Tensor.sparse_dim(input)",
    "tensorflow": "def tensorflow_call(input):\n    sparse_count = tf.reduce_sum(tf.cast(tf.equal(tf.shape(input), 1), tf.int32))\n    return tf.maximum(sparse_count - tf.shape(input).shape[0], 0)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])",
    "input = torch.tensor([1, 2, 3, 4, 5])"
  ]
}
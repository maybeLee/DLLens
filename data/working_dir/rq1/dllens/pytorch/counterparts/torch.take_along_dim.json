{
  "function_name": "torch.take_along_dim(input, indices, dim, *, out=None)",
  "inputs": [
    "input",
    "indices",
    "dim"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nindices = torch.tensor([[0, 1], [1, 0]])\ndim = 1",
    "indices = torch.tensor([[0, 1], [1, 0]])\ndim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nindices = torch.tensor([[0, 1], [1, 0]])\ndim = -1",
    "indices = torch.tensor([[0, 1], [1, 0]])\ndim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "indices = torch.tensor([[0, 1], [1, 0]])\ndim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "indices = torch.tensor([[0, 1], [1, 0]])\ndim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "indices = torch.tensor([[0, 1], [1, 0]])\ndim = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,indices,dim):\n  return torch.take_along_dim(input,indices,dim)",
    "tensorflow": "def tensorflow_call(input, indices, dim):\n    if dim < 0:\n        dim += tf.rank(input)\n    if tf.shape(input)[0] == 1:\n        input = tf.tile(input, [tf.shape(indices)[0], 1])\n    return tf.gather(input, indices, batch_dims=1, axis=dim)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nindices = torch.tensor([[0, 1], [1, 0]])\ndim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nindices = torch.tensor([[0, 1], [1, 0]])\ndim = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\nindices = torch.tensor([[0, 1], [1, 0]])\ndim = 1"
  ]
}
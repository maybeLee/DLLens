{
  "function_name": "torch.mv(input, vec, *, out=None)",
  "inputs": [
    "input",
    "vec"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nvec = torch.tensor([5, 6], dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([1.0, 2.0])",
    "vec = torch.tensor([5, 6], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nvec = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "vec = torch.tensor([5, 6], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(4,2), dtype=torch.float32)",
    "vec = torch.tensor([5, 6], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "vec = torch.tensor([5, 6], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,vec):\n  return torch.mv(input,vec)",
    "tensorflow": "def tensorflow_call(input, vec):\n    return tf.linalg.matvec(input, vec)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nvec = torch.tensor([5, 6], dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nvec = torch.tensor([1.0, 2.0])",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\nvec = torch.tensor([5, 6], dtype=torch.float32)"
  ]
}
{
  "function_name": "torch.Tensor.narrow_copy(input, dimension, start, length)",
  "inputs": [
    "input",
    "dimension",
    "start",
    "length"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\nstart = 1\nlength = 2\ndimension = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nlength = 2\nstart = -2",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(3,3,1,1), dtype=torch.float32)",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(1,3), dtype=torch.float32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nlength = 2\nstart = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nlength = 2\nstart = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\nstart = 1\nlength = 2\ndimension = -1",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(3,3), dtype=torch.half)",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(3,3,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nstart = 1\nlength = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nstart = 1\nlength = 0",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(5,3), dtype=torch.float32)",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(3,3), dtype=torch.float32)",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(3,3), dtype=torch.float16)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nlength = 2\nstart = -3",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(3,3), dtype=torch.float64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\nstart = 1\nlength = 2\ndimension = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\nstart = 1\nlength = 2\ndimension = -2",
    "dimension = 1\nstart = 1\nlength = 2\ninput = torch.tensor(np.random.randn(3,3,1,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dimension,start,length):\n  return torch.Tensor.narrow_copy(input,dimension,start,length)",
    "tensorflow": "def tensorflow_call(input, dimension, start, length):\n    if dimension < 0:\n        dimension += tf.rank(input)\n    input_shape = tf.shape(input)\n    if start < 0:\n        start += input_shape[dimension]\n    start = tf.clip_by_value(start, 0, input_shape[dimension])\n    size = tf.shape(input)[dimension]\n    end = tf.minimum(start + length, size)\n    begin = tf.zeros(tf.rank(input), dtype=tf.int32)\n    begin = tf.tensor_scatter_nd_update(begin, [[dimension]], [start])\n    slice_size = tf.zeros(tf.rank(input), dtype=tf.int32)\n    slice_size = tf.tensor_scatter_nd_update(slice_size, [[dimension]], [end - start])\n    for i in range(tf.rank(input)):\n        if i != dimension:\n            slice_size = tf.tensor_scatter_nd_update(slice_size, [[i]], [input_shape[i]])\n    return tf.slice(input, begin, slice_size)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32)\ndimension = 1\nstart = 1\nlength = 2",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndimension = 1\nstart = 1\nlength = 2"
  ]
}
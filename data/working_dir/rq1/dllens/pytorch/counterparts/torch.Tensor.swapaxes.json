{
  "function_name": "torch.Tensor.swapaxes(input, axis0, axis1)",
  "inputs": [
    "input",
    "axis0",
    "axis1"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis0 = 0\naxis1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis1 = 1\naxis0 = -2",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis1 = 1\naxis0 = -1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis0 = 0\naxis1 = 0",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis0 = 0\naxis1 = -1",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (2,1)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis0 = 0\naxis1 = -2",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis1 = 1\naxis0 = 1",
    "axis0 = 0\naxis1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (5,3)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis1 = 1\naxis0 = 0"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,axis0,axis1):\n  return torch.Tensor.swapaxes(input,axis0,axis1)",
    "tensorflow": "def tensorflow_call(input, axis0, axis1):\n    if axis0 < 0:\n        axis0 += len(input.shape)\n    if axis1 < 0:\n        axis1 += len(input.shape)\n    if axis0 == axis1:\n        return input\n    perm = list(range(len(input.shape)))\n    (perm[axis0], perm[axis1]) = (perm[axis1], perm[axis0])\n    return tf.transpose(input, perm=perm)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis0 = 0\naxis1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis0 = 0\naxis1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\naxis0 = 0\naxis1 = 1"
  ]
}
{
  "function_name": "torch.addcdiv(input, tensor1, tensor2, *, value=1, out=None)",
  "inputs": [
    "input",
    "tensor1",
    "tensor2"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ntensor1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\ntensor2 = torch.tensor([[1.0, 1.0], [1.0, 1.0]])",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ntensor1 = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "tensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,tensor1,tensor2):\n  return torch.addcdiv(input,tensor1,tensor2)",
    "tensorflow": "def tensorflow_call(input, tensor1, tensor2):\n    input = tf.cast(input, dtype=tf.float32)\n    tensor1 = tf.cast(tensor1, dtype=tf.float32)\n    tensor2 = tf.cast(tensor2, dtype=tf.float32)\n    return tf.add(input, tf.divide(tensor1, tensor2))"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)\ntensor1 = torch.tensor([[5, 6], [7, 8]], dtype=torch.float32)\ntensor2 = torch.tensor([[9, 10], [11, 12]], dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ntensor1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\ntensor2 = torch.tensor([[1.0, 1.0], [1.0, 1.0]])",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\ntensor1 = torch.tensor([[5.0, 6.0], [7.0, 8.0]])\ntensor2 = torch.tensor([[1.0, 1.0], [1.0, 1.0]])"
  ]
}
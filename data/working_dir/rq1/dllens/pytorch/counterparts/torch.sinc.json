{
  "function_name": "torch.sinc(input, *, out=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([0.1, 0.2, 0.3, 0.4, 0.5], dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(5,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,1,1,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.sinc(input)",
    "tensorflow": "def tensorflow_call(input):\n    pi_input = tf.constant(np.pi, dtype=input.dtype) * input\n    sinc_output = tf.where(input == 0, tf.ones_like(input), tf.sin(pi_input) / pi_input)\n    return tf.reshape(sinc_output, input.shape)"
  },
  "llm_inputs": [
    "input = torch.tensor([0.1, 0.2, 0.3, 0.4, 0.5], dtype=torch.float32)",
    "input = torch.tensor([0.1, 0.2, 0.3, 0.4, 0.5], dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])"
  ]
}
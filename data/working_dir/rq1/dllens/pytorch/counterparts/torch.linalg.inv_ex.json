{
  "function_name": "torch.linalg.inv_ex(A, *, check_errors=False, out=None)",
  "inputs": [
    "A"
  ],
  "sample_inputs": [
    "A = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "A = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "A = torch.tensor(np.random.randn(2,2), dtype=torch.float64)",
    "A = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "A = torch.tensor(np.random.randn(2,2), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(A):\n  return torch.linalg.inv_ex(A)",
    "tensorflow": "def tensorflow_call(A):\n    inverse = tf.linalg.inv(A)\n    info = tf.zeros(tf.shape(A)[:-2], dtype=tf.int32)\n    return (inverse, info)"
  },
  "llm_inputs": [
    "A = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "A = torch.tensor([[1.0, 2.0], [3.0, 4.0]])",
    "A = torch.tensor([[1.0, 2.0], [3.0, 4.0]])"
  ]
}
{
  "function_name": "torch.Tensor.gcd(input, other)",
  "inputs": [
    "input",
    "other"
  ],
  "sample_inputs": [
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor([1, 2, 3, 4])",
    "other = torch.tensor([1, 2, 3, 4])\ninput = torch.tensor(np.random.randint(-50, 50, (4,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int64)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, (4,1,1,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3, 4])\ninput = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int32)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, (4,1,1,1,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3, 4])\ninput = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, (4,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3, 4])\ninput = torch.tensor(np.random.randint(-50, 50, (4,1,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, (1)), dtype=torch.int64)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, (4,1,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3, 4])\ninput = torch.tensor(np.random.randint(-50, 50, (4,1)), dtype=torch.int64)",
    "other = torch.tensor([1, 2, 3, 4])\ninput = torch.tensor(np.random.randint(-50, 50, (4,1,1)), dtype=torch.int64)",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int32)",
    "other = torch.tensor([1, 2, 3, 4])\ninput = torch.tensor(np.random.randint(-50, 50, (4)), dtype=torch.int64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other):\n  return torch.Tensor.gcd(input,other)",
    "tensorflow": "def tensorflow_call(input, other):\n    return tf.experimental.numpy.gcd(input, other)"
  },
  "llm_inputs": [
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor([1, 2, 3, 4])",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor([1, 2, 3, 4])",
    "input = torch.tensor([2, 4, 6, 8])\nother = torch.tensor([1, 2, 3, 4])"
  ]
}
{
  "function_name": "torch.Tensor.nextafter(input, other)",
  "inputs": [
    "input",
    "other"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([1.5, 2.5, 3.5])",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([4.0, 5.0, 6.0])",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "other = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other):\n  return torch.Tensor.nextafter(input,other)",
    "tensorflow": "def tensorflow_call(input, other):\n    return tf.experimental.numpy.nextafter(input, other)"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32)\nother = torch.tensor([0.5, 1.5, 2.5], dtype=torch.float32)",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([1.5, 2.5, 3.5])",
    "input = torch.tensor([1.0, 2.0, 3.0])\nother = torch.tensor([4.0, 5.0, 6.0])"
  ]
}
{
  "function_name": "torch.is_conj(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.complex64)",
    "input = torch.tensor([[1, 2], [3, 4]])",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.complex128)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(5,2), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(2,1), dtype=torch.complex64)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.complex64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.is_conj(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.reduce_any(tf.math.conj(input) != input)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4]], dtype=torch.complex64)",
    "input = torch.tensor([[1, 2], [3, 4]])",
    "input = torch.tensor([[1, 2], [3, 4]])"
  ]
}
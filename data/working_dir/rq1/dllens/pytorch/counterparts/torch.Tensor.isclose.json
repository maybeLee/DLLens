{
  "function_name": "torch.Tensor.isclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False)",
  "inputs": [
    "input",
    "other",
    "rtol",
    "atol",
    "equal_nan"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\natol = 1e-08\nequal_nan = False\nrtol = 47.49",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\nequal_nan = False\natol = 83.71",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\nequal_nan = False\natol = 29.01",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\natol = 1e-08\nequal_nan = False\nrtol = 34.35",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\nequal_nan = False\natol = 97.22",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\nequal_nan = False\natol = 3.38",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = True",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\nother = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "other = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,other,rtol=1e-05,atol=1e-08,equal_nan=False):\n  return torch.Tensor.isclose(input,other,rtol,atol,equal_nan)",
    "tensorflow": "def tensorflow_call(input, other, rtol=1e-05, atol=1e-08, equal_nan=False):\n    if equal_nan:\n        input = tf.where(tf.math.is_nan(input), tf.zeros_like(input), input)\n        other = tf.where(tf.math.is_nan(other), tf.zeros_like(other), other)\n    diff = tf.abs(input - other)\n    tol = atol + rtol * tf.abs(other)\n    return diff <= tol"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nother = torch.tensor([[1.0, 2.0], [3.0, 4.1]])\nrtol = 1e-05\natol = 1e-08\nequal_nan = False"
  ]
}
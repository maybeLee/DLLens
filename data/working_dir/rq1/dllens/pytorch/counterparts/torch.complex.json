{
  "function_name": "torch.complex(real, imag, *, out=None)",
  "inputs": [
    "real",
    "imag"
  ],
  "sample_inputs": [
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor([5.0, 6.0, 7.0, 8.0])",
    "real = torch.tensor([1.0, 2.0, 3.0])\nimag = torch.tensor([4.0, 5.0, 6.0])",
    "imag = torch.tensor([5.0, 6.0, 7.0, 8.0])\nreal = torch.tensor(np.random.randn(4,1), dtype=torch.float32)",
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor(np.random.randn(4,1,1,1), dtype=torch.float32)",
    "imag = torch.tensor([5.0, 6.0, 7.0, 8.0])\nreal = torch.tensor(np.random.randn(4,1,1,1,1), dtype=torch.float32)",
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "imag = torch.tensor([5.0, 6.0, 7.0, 8.0])\nreal = torch.tensor(np.random.randn(1), dtype=torch.float32)",
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "imag = torch.tensor([5.0, 6.0, 7.0, 8.0])\nreal = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor(np.random.randn(4,1,1,1,1), dtype=torch.float32)",
    "imag = torch.tensor([5.0, 6.0, 7.0, 8.0])\nreal = torch.tensor(np.random.randn(4,1,1,1), dtype=torch.float32)",
    "imag = torch.tensor([5.0, 6.0, 7.0, 8.0])\nreal = torch.tensor(np.random.randn(4,1,1), dtype=torch.float32)",
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor(np.random.randn(4,1), dtype=torch.float32)",
    "imag = torch.tensor([5.0, 6.0, 7.0, 8.0])\nreal = torch.tensor(np.random.randn(4), dtype=torch.float32)",
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor(np.random.randn(4), dtype=torch.float32)",
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor(np.random.randn(4,1,1), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(real,imag):\n  return torch.complex(real,imag)",
    "tensorflow": "def tensorflow_call(real, imag):\n    return tf.complex(real, imag)"
  },
  "llm_inputs": [
    "real = torch.tensor([1.0, 2.0, 3.0, 4.0])\nimag = torch.tensor([5.0, 6.0, 7.0, 8.0])",
    "real = torch.tensor([1.0, 2.0, 3.0])\nimag = torch.tensor([4.0, 5.0, 6.0])",
    "real = torch.tensor([1.0, 2.0, 3.0])\nimag = torch.tensor([4.0, 5.0, 6.0])"
  ]
}
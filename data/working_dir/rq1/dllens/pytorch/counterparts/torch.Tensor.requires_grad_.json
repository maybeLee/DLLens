{
  "function_name": "torch.Tensor.requires_grad_(input, requires_grad=True)",
  "inputs": [
    "input",
    "requires_grad"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrequires_grad = True",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,4), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrequires_grad = False",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "requires_grad = True\ninput = torch.tensor(np.random.randn(2,2), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,requires_grad=True):\n  return torch.Tensor.requires_grad_(input,requires_grad)",
    "tensorflow": "def tensorflow_call(input, requires_grad=True):\n    return tf.Variable(input, trainable=requires_grad)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrequires_grad = True",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrequires_grad = True",
    "input = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nrequires_grad = True"
  ]
}
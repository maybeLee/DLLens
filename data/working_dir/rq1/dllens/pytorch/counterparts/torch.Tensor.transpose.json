{
  "function_name": "torch.Tensor.transpose(input, dim0, dim1)",
  "inputs": [
    "input",
    "dim0",
    "dim1"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim0 = 0\ndim1 = 0",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim1 = 1\ndim0 = -1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim0 = 0\ndim1 = -1",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,2,1)), dtype=torch.int64)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,5)), dtype=torch.int64)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,2)), dtype=torch.int32)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,2)), dtype=torch.int64)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,1)), dtype=torch.int64)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,2,1,1)), dtype=torch.int64)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (3,2,1,1,1)), dtype=torch.int64)",
    "dim0 = 0\ndim1 = 1\ninput = torch.tensor(np.random.randint(-50, 50, (1,2)), dtype=torch.int64)",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim1 = 1\ndim0 = 1",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim0 = 0\ndim1 = -2",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim1 = 1\ndim0 = -2",
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim1 = 1\ndim0 = 0"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dim0,dim1):\n  return torch.Tensor.transpose(input,dim0,dim1)",
    "tensorflow": "def tensorflow_call(input, dim0, dim1):\n    num_dims = tf.rank(input)\n    dim0 = dim0 if dim0 >= 0 else num_dims + dim0\n    dim1 = dim1 if dim1 >= 0 else num_dims + dim1\n    perm = tf.range(num_dims)\n    perm = tf.tensor_scatter_nd_update(perm, [[dim0], [dim1]], [perm[dim1], perm[dim0]])\n    return tf.transpose(input, perm=perm)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2], [3, 4], [5, 6]])\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim0 = 0\ndim1 = 1",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])\ndim0 = 0\ndim1 = 1"
  ]
}
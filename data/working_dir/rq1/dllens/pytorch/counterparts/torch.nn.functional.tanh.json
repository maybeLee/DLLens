{
  "function_name": "torch.nn.functional.tanh(input)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[0.5, -0.5], [1.0, -1.0]], dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]])",
    "input = torch.tensor([[0.5, -0.5], [1.0, -1.0]])",
    "input = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(1,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(2,2,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,4), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(2,2), dtype=torch.float64)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.nn.functional.tanh(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.nn.tanh(input)"
  },
  "llm_inputs": [
    "input = torch.tensor([[0.5, -0.5], [1.0, -1.0]], dtype=torch.float32)",
    "input = torch.tensor([[0.1, 0.2], [0.3, 0.4]])",
    "input = torch.tensor([[0.5, -0.5], [1.0, -1.0]])"
  ]
}
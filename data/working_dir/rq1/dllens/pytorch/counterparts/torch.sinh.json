{
  "function_name": "torch.sinh(input, *, out=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0])",
    "input = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])",
    "input_data = [1.0, 2.0, 3.0]\ninput = torch.tensor(input_data)",
    "input = torch.tensor(np.random.randn(3,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3), dtype=torch.float64)",
    "input = torch.tensor(np.random.randn(3), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,1,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3), dtype=torch.float16)",
    "input = torch.tensor(np.random.randn(3,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3), dtype=torch.half)",
    "input = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(3,1,1,1), dtype=torch.float32)",
    "input = torch.tensor(np.random.randn(5), dtype=torch.float32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.sinh(input)",
    "tensorflow": "def tensorflow_call(input):\n    return tf.sinh(input)"
  },
  "llm_inputs": [
    "input = torch.tensor([1.0, 2.0, 3.0])",
    "input = torch.tensor([0.0, 1.0, 2.0, 3.0, 4.0])",
    "input_data = [1.0, 2.0, 3.0]\ninput = torch.tensor(input_data)"
  ]
}
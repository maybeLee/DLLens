{
  "function_name": "torch.aminmax(input, *, dim=None, keepdim=False, out=None)",
  "inputs": [
    "input"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (1,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (3,3)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, ()), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1,1,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,5)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3,1)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,2)), dtype=torch.int64)",
    "input = torch.tensor(np.random.randint(-50, 50, (2,3)), dtype=torch.int32)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input):\n  return torch.aminmax(input)",
    "tensorflow": "def tensorflow_call(input):\n    min_value = tf.reduce_min(input)\n    max_value = tf.reduce_max(input)\n    return (min_value, max_value)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]])"
  ]
}
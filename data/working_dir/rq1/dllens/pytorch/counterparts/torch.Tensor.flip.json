{
  "function_name": "torch.Tensor.flip(input, dims)",
  "inputs": [
    "input",
    "dims"
  ],
  "sample_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndims = torch.tensor([0])",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,1), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,3,1), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float64)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,5), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.half)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(5,3), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,3,1,1,1), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(1,3), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,3,1,1), dtype=torch.float32)",
    "dims = torch.tensor([0])\ninput = torch.tensor(np.random.randn(2,3), dtype=torch.float16)"
  ],
  "counterparts": {
    "pytorch": "def pytorch_call(input,dims):\n  return torch.Tensor.flip(input,dims)",
    "tensorflow": "def tensorflow_call(input, dims):\n    return tf.reverse(input, axis=dims)"
  },
  "llm_inputs": [
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndims = torch.tensor([0])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndims = torch.tensor([0])",
    "input = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)\ndims = torch.tensor([0])"
  ]
}